// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// The minimum log level to open the issue on
type TransformationExecutionLogLevel uint8

const (
	TransformationExecutionLogLevelDebug TransformationExecutionLogLevel = iota + 1
	TransformationExecutionLogLevelInfo
	TransformationExecutionLogLevelWarn
	TransformationExecutionLogLevelError
	TransformationExecutionLogLevelFatal
)

func (t TransformationExecutionLogLevel) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TransformationExecutionLogLevelDebug:
		return "debug"
	case TransformationExecutionLogLevelInfo:
		return "info"
	case TransformationExecutionLogLevelWarn:
		return "warn"
	case TransformationExecutionLogLevelError:
		return "error"
	case TransformationExecutionLogLevelFatal:
		return "fatal"
	}
}

func (t TransformationExecutionLogLevel) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TransformationExecutionLogLevel) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "debug":
		value := TransformationExecutionLogLevelDebug
		*t = value
	case "info":
		value := TransformationExecutionLogLevelInfo
		*t = value
	case "warn":
		value := TransformationExecutionLogLevelWarn
		*t = value
	case "error":
		value := TransformationExecutionLogLevelError
		*t = value
	case "fatal":
		value := TransformationExecutionLogLevelFatal
		*t = value
	}
	return nil
}
