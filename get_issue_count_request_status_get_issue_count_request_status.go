// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Issue status
type GetIssueCountRequestStatusGetIssueCountRequestStatus uint8

const (
	GetIssueCountRequestStatusGetIssueCountRequestStatusOpened GetIssueCountRequestStatusGetIssueCountRequestStatus = iota + 1
	GetIssueCountRequestStatusGetIssueCountRequestStatusIgnored
	GetIssueCountRequestStatusGetIssueCountRequestStatusAcknowledged
	GetIssueCountRequestStatusGetIssueCountRequestStatusResolved
)

func (g GetIssueCountRequestStatusGetIssueCountRequestStatus) String() string {
	switch g {
	default:
		return strconv.Itoa(int(g))
	case GetIssueCountRequestStatusGetIssueCountRequestStatusOpened:
		return "OPENED"
	case GetIssueCountRequestStatusGetIssueCountRequestStatusIgnored:
		return "IGNORED"
	case GetIssueCountRequestStatusGetIssueCountRequestStatusAcknowledged:
		return "ACKNOWLEDGED"
	case GetIssueCountRequestStatusGetIssueCountRequestStatusResolved:
		return "RESOLVED"
	}
}

func (g GetIssueCountRequestStatusGetIssueCountRequestStatus) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", g.String())), nil
}

func (g *GetIssueCountRequestStatusGetIssueCountRequestStatus) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "OPENED":
		value := GetIssueCountRequestStatusGetIssueCountRequestStatusOpened
		*g = value
	case "IGNORED":
		value := GetIssueCountRequestStatusGetIssueCountRequestStatusIgnored
		*g = value
	case "ACKNOWLEDGED":
		value := GetIssueCountRequestStatusGetIssueCountRequestStatusAcknowledged
		*g = value
	case "RESOLVED":
		value := GetIssueCountRequestStatusGetIssueCountRequestStatusResolved
		*g = value
	}
	return nil
}
