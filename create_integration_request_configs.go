// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

// Decrypted Key/Value object of the associated configuration for that provider
type CreateIntegrationRequestConfigs struct {
	typeName                    string
	HmacIntegrationConfigs      *HmacIntegrationConfigs
	ApiKeyIntegrationConfigs    *ApiKeyIntegrationConfigs
	HandledHmacConfigs          *HandledHmacConfigs
	BasicAuthIntegrationConfigs *BasicAuthIntegrationConfigs
	ShopifyIntegrationConfigs   *ShopifyIntegrationConfigs
}

func NewCreateIntegrationRequestConfigsFromHmacIntegrationConfigs(value *HmacIntegrationConfigs) *CreateIntegrationRequestConfigs {
	return &CreateIntegrationRequestConfigs{typeName: "hmacIntegrationConfigs", HmacIntegrationConfigs: value}
}

func NewCreateIntegrationRequestConfigsFromApiKeyIntegrationConfigs(value *ApiKeyIntegrationConfigs) *CreateIntegrationRequestConfigs {
	return &CreateIntegrationRequestConfigs{typeName: "apiKeyIntegrationConfigs", ApiKeyIntegrationConfigs: value}
}

func NewCreateIntegrationRequestConfigsFromHandledHmacConfigs(value *HandledHmacConfigs) *CreateIntegrationRequestConfigs {
	return &CreateIntegrationRequestConfigs{typeName: "handledHmacConfigs", HandledHmacConfigs: value}
}

func NewCreateIntegrationRequestConfigsFromBasicAuthIntegrationConfigs(value *BasicAuthIntegrationConfigs) *CreateIntegrationRequestConfigs {
	return &CreateIntegrationRequestConfigs{typeName: "basicAuthIntegrationConfigs", BasicAuthIntegrationConfigs: value}
}

func NewCreateIntegrationRequestConfigsFromShopifyIntegrationConfigs(value *ShopifyIntegrationConfigs) *CreateIntegrationRequestConfigs {
	return &CreateIntegrationRequestConfigs{typeName: "shopifyIntegrationConfigs", ShopifyIntegrationConfigs: value}
}

func (c *CreateIntegrationRequestConfigs) UnmarshalJSON(data []byte) error {
	valueHmacIntegrationConfigs := new(HmacIntegrationConfigs)
	if err := json.Unmarshal(data, &valueHmacIntegrationConfigs); err == nil {
		c.typeName = "hmacIntegrationConfigs"
		c.HmacIntegrationConfigs = valueHmacIntegrationConfigs
		return nil
	}
	valueApiKeyIntegrationConfigs := new(ApiKeyIntegrationConfigs)
	if err := json.Unmarshal(data, &valueApiKeyIntegrationConfigs); err == nil {
		c.typeName = "apiKeyIntegrationConfigs"
		c.ApiKeyIntegrationConfigs = valueApiKeyIntegrationConfigs
		return nil
	}
	valueHandledHmacConfigs := new(HandledHmacConfigs)
	if err := json.Unmarshal(data, &valueHandledHmacConfigs); err == nil {
		c.typeName = "handledHmacConfigs"
		c.HandledHmacConfigs = valueHandledHmacConfigs
		return nil
	}
	valueBasicAuthIntegrationConfigs := new(BasicAuthIntegrationConfigs)
	if err := json.Unmarshal(data, &valueBasicAuthIntegrationConfigs); err == nil {
		c.typeName = "basicAuthIntegrationConfigs"
		c.BasicAuthIntegrationConfigs = valueBasicAuthIntegrationConfigs
		return nil
	}
	valueShopifyIntegrationConfigs := new(ShopifyIntegrationConfigs)
	if err := json.Unmarshal(data, &valueShopifyIntegrationConfigs); err == nil {
		c.typeName = "shopifyIntegrationConfigs"
		c.ShopifyIntegrationConfigs = valueShopifyIntegrationConfigs
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreateIntegrationRequestConfigs) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "hmacIntegrationConfigs":
		return json.Marshal(c.HmacIntegrationConfigs)
	case "apiKeyIntegrationConfigs":
		return json.Marshal(c.ApiKeyIntegrationConfigs)
	case "handledHmacConfigs":
		return json.Marshal(c.HandledHmacConfigs)
	case "basicAuthIntegrationConfigs":
		return json.Marshal(c.BasicAuthIntegrationConfigs)
	case "shopifyIntegrationConfigs":
		return json.Marshal(c.ShopifyIntegrationConfigs)
	}
}

type CreateIntegrationRequestConfigsVisitor interface {
	VisitHmacIntegrationConfigs(*HmacIntegrationConfigs) error
	VisitApiKeyIntegrationConfigs(*ApiKeyIntegrationConfigs) error
	VisitHandledHmacConfigs(*HandledHmacConfigs) error
	VisitBasicAuthIntegrationConfigs(*BasicAuthIntegrationConfigs) error
	VisitShopifyIntegrationConfigs(*ShopifyIntegrationConfigs) error
}

func (c *CreateIntegrationRequestConfigs) Accept(v CreateIntegrationRequestConfigsVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "hmacIntegrationConfigs":
		return v.VisitHmacIntegrationConfigs(c.HmacIntegrationConfigs)
	case "apiKeyIntegrationConfigs":
		return v.VisitApiKeyIntegrationConfigs(c.ApiKeyIntegrationConfigs)
	case "handledHmacConfigs":
		return v.VisitHandledHmacConfigs(c.HandledHmacConfigs)
	case "basicAuthIntegrationConfigs":
		return v.VisitBasicAuthIntegrationConfigs(c.BasicAuthIntegrationConfigs)
	case "shopifyIntegrationConfigs":
		return v.VisitShopifyIntegrationConfigs(c.ShopifyIntegrationConfigs)
	}
}
