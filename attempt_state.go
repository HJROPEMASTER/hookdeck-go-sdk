// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

type AttemptState uint8

const (
	AttemptStateDelivering AttemptState = iota + 1
	AttemptStateQueued
	AttemptStatePending
	AttemptStateCompleted
	AttemptStateHold
)

func (a AttemptState) String() string {
	switch a {
	default:
		return strconv.Itoa(int(a))
	case AttemptStateDelivering:
		return "DELIVERING"
	case AttemptStateQueued:
		return "QUEUED"
	case AttemptStatePending:
		return "PENDING"
	case AttemptStateCompleted:
		return "COMPLETED"
	case AttemptStateHold:
		return "HOLD"
	}
}

func (a AttemptState) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", a.String())), nil
}

func (a *AttemptState) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "DELIVERING":
		value := AttemptStateDelivering
		*a = value
	case "QUEUED":
		value := AttemptStateQueued
		*a = value
	case "PENDING":
		value := AttemptStatePending
		*a = value
	case "COMPLETED":
		value := AttemptStateCompleted
		*a = value
	case "HOLD":
		value := AttemptStateHold
		*a = value
	}
	return nil
}
