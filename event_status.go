// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

type EventStatus uint8

const (
	EventStatusScheduled EventStatus = iota + 1
	EventStatusQueued
	EventStatusHold
	EventStatusSuccessful
	EventStatusFailed
)

func (e EventStatus) String() string {
	switch e {
	default:
		return strconv.Itoa(int(e))
	case EventStatusScheduled:
		return "SCHEDULED"
	case EventStatusQueued:
		return "QUEUED"
	case EventStatusHold:
		return "HOLD"
	case EventStatusSuccessful:
		return "SUCCESSFUL"
	case EventStatusFailed:
		return "FAILED"
	}
}

func (e EventStatus) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", e.String())), nil
}

func (e *EventStatus) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "SCHEDULED":
		value := EventStatusScheduled
		*e = value
	case "QUEUED":
		value := EventStatusQueued
		*e = value
	case "HOLD":
		value := EventStatusHold
		*e = value
	case "SUCCESSFUL":
		value := EventStatusSuccessful
		*e = value
	case "FAILED":
		value := EventStatusFailed
		*e = value
	}
	return nil
}
