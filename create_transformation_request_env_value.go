// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type CreateTransformationRequestEnvValue struct {
	typeName string
	String   string
	Double   float64
}

func NewCreateTransformationRequestEnvValueFromString(value string) *CreateTransformationRequestEnvValue {
	return &CreateTransformationRequestEnvValue{typeName: "string", String: value}
}

func NewCreateTransformationRequestEnvValueFromDouble(value float64) *CreateTransformationRequestEnvValue {
	return &CreateTransformationRequestEnvValue{typeName: "double", Double: value}
}

func (c *CreateTransformationRequestEnvValue) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		c.typeName = "double"
		c.Double = valueDouble
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreateTransformationRequestEnvValue) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "double":
		return json.Marshal(c.Double)
	}
}

type CreateTransformationRequestEnvValueVisitor interface {
	VisitString(string) error
	VisitDouble(float64) error
}

func (c *CreateTransformationRequestEnvValue) Accept(v CreateTransformationRequestEnvValueVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return v.VisitString(c.String)
	case "double":
		return v.VisitDouble(c.Double)
	}
}
