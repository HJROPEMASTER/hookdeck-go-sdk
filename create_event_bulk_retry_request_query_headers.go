// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

// URL Encoded string of the JSON to match to the data headers
type CreateEventBulkRetryRequestQueryHeaders struct {
	typeName                                                                       string
	String                                                                         string
	CreateEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders *CreateEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders
}

func NewCreateEventBulkRetryRequestQueryHeadersFromString(value string) *CreateEventBulkRetryRequestQueryHeaders {
	return &CreateEventBulkRetryRequestQueryHeaders{typeName: "string", String: value}
}

func NewCreateEventBulkRetryRequestQueryHeadersFromCreateEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders(value *CreateEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders) *CreateEventBulkRetryRequestQueryHeaders {
	return &CreateEventBulkRetryRequestQueryHeaders{typeName: "createEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders", CreateEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders: value}
}

func (c *CreateEventBulkRetryRequestQueryHeaders) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueCreateEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders := new(CreateEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders)
	if err := json.Unmarshal(data, &valueCreateEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders); err == nil {
		c.typeName = "createEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders"
		c.CreateEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders = valueCreateEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreateEventBulkRetryRequestQueryHeaders) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "createEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders":
		return json.Marshal(c.CreateEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders)
	}
}

type CreateEventBulkRetryRequestQueryHeadersVisitor interface {
	VisitString(string) error
	VisitCreateEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders(*CreateEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders) error
}

func (c *CreateEventBulkRetryRequestQueryHeaders) Accept(v CreateEventBulkRetryRequestQueryHeadersVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return v.VisitString(c.String)
	case "createEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders":
		return v.VisitCreateEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders(c.CreateEventBulkRetryRequestQueryHeadersCreateEventBulkRetryRequestQueryHeaders)
	}
}
