// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

// Filter by CLI IDs. `?[any]=true` operator for any CLI.
type CreateEventBulkRetryRequestQueryCliId struct {
	typeName                                                                   string
	String                                                                     string
	CreateEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId *CreateEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId
	StringList                                                                 []string
}

func NewCreateEventBulkRetryRequestQueryCliIdFromString(value string) *CreateEventBulkRetryRequestQueryCliId {
	return &CreateEventBulkRetryRequestQueryCliId{typeName: "string", String: value}
}

func NewCreateEventBulkRetryRequestQueryCliIdFromCreateEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId(value *CreateEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId) *CreateEventBulkRetryRequestQueryCliId {
	return &CreateEventBulkRetryRequestQueryCliId{typeName: "createEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId", CreateEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId: value}
}

func NewCreateEventBulkRetryRequestQueryCliIdFromStringList(value []string) *CreateEventBulkRetryRequestQueryCliId {
	return &CreateEventBulkRetryRequestQueryCliId{typeName: "stringList", StringList: value}
}

func (c *CreateEventBulkRetryRequestQueryCliId) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueCreateEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId := new(CreateEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId)
	if err := json.Unmarshal(data, &valueCreateEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId); err == nil {
		c.typeName = "createEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId"
		c.CreateEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId = valueCreateEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId
		return nil
	}
	var valueStringList []string
	if err := json.Unmarshal(data, &valueStringList); err == nil {
		c.typeName = "stringList"
		c.StringList = valueStringList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreateEventBulkRetryRequestQueryCliId) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "createEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId":
		return json.Marshal(c.CreateEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId)
	case "stringList":
		return json.Marshal(c.StringList)
	}
}

type CreateEventBulkRetryRequestQueryCliIdVisitor interface {
	VisitString(string) error
	VisitCreateEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId(*CreateEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId) error
	VisitStringList([]string) error
}

func (c *CreateEventBulkRetryRequestQueryCliId) Accept(v CreateEventBulkRetryRequestQueryCliIdVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return v.VisitString(c.String)
	case "createEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId":
		return v.VisitCreateEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId(c.CreateEventBulkRetryRequestQueryCliIdCreateEventBulkRetryRequestQueryCliId)
	case "stringList":
		return v.VisitStringList(c.StringList)
	}
}
