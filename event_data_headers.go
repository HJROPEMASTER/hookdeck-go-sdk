// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type EventDataHeaders struct {
	typeName                string
	String                  string
	StringStringOptionalMap map[string]*string
}

func NewEventDataHeadersFromString(value string) *EventDataHeaders {
	return &EventDataHeaders{typeName: "string", String: value}
}

func NewEventDataHeadersFromStringStringOptionalMap(value map[string]*string) *EventDataHeaders {
	return &EventDataHeaders{typeName: "stringStringOptionalMap", StringStringOptionalMap: value}
}

func (e *EventDataHeaders) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	var valueStringStringOptionalMap map[string]*string
	if err := json.Unmarshal(data, &valueStringStringOptionalMap); err == nil {
		e.typeName = "stringStringOptionalMap"
		e.StringStringOptionalMap = valueStringStringOptionalMap
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventDataHeaders) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "stringStringOptionalMap":
		return json.Marshal(e.StringStringOptionalMap)
	}
}

type EventDataHeadersVisitor interface {
	VisitString(string) error
	VisitStringStringOptionalMap(map[string]*string) error
}

func (e *EventDataHeaders) Accept(v EventDataHeadersVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return v.VisitString(e.String)
	case "stringStringOptionalMap":
		return v.VisitStringStringOptionalMap(e.StringStringOptionalMap)
	}
}
