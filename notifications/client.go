// This file was auto-generated by Fern from our API Definition.

package notifications

import (
	context "context"
	fmt "fmt"
	hookdeckgo "github.com/fern-hookdeck/hookdeck-go"
	core "github.com/fern-hookdeck/hookdeck-go/core"
	http "net/http"
)

type Client interface {
	ListCustomDomains(ctx context.Context, teamId string) (hookdeckgo.ListCustomDomainSchema, error)
	AddCustomDomain(ctx context.Context, teamId string, request *hookdeckgo.AddCustomHostname) (*hookdeckgo.AddCustomHostname, error)
	DeleteCustomDomain(ctx context.Context, teamId string, domainId string) (*hookdeckgo.DeleteCustomDomainSchema, error)
}

func NewClient(opts ...core.ClientOption) Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &client{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type client struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

func (c *client) ListCustomDomains(ctx context.Context, teamId string) (hookdeckgo.ListCustomDomainSchema, error) {
	baseURL := "https://api.hookdeck.com/2023-07-01"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"teams/%v/custom_domains", teamId)

	var response hookdeckgo.ListCustomDomainSchema
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (c *client) AddCustomDomain(ctx context.Context, teamId string, request *hookdeckgo.AddCustomHostname) (*hookdeckgo.AddCustomHostname, error) {
	baseURL := "https://api.hookdeck.com/2023-07-01"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"teams/%v/custom_domains", teamId)

	var response *hookdeckgo.AddCustomHostname
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (c *client) DeleteCustomDomain(ctx context.Context, teamId string, domainId string) (*hookdeckgo.DeleteCustomDomainSchema, error) {
	baseURL := "https://api.hookdeck.com/2023-07-01"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"teams/%v/custom_domains/%v", teamId, domainId)

	var response *hookdeckgo.DeleteCustomDomainSchema
	if err := core.DoRequest(
		ctx,
		c.httpClient,
		endpointURL,
		http.MethodDelete,
		nil,
		&response,
		false,
		c.header,
		nil,
	); err != nil {
		return response, err
	}
	return response, nil
}
