// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/hookdeck/hookdeck-go-sdk/core"
)

type CreateFullSnapshotRequest struct {
	// If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
	Wait *bool `json:"-"`
}

type CreateShardSnapshotRequest struct {
	// If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
	Wait *bool `json:"-"`
}

type CreateSnapshotRequest struct {
	// If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
	Wait *bool `json:"-"`
}

type DeleteFullSnapshotRequest struct {
	// If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
	Wait *bool `json:"-"`
}

type DeleteShardSnapshotRequest struct {
	// If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
	Wait *bool `json:"-"`
}

type DeleteSnapshotRequest struct {
	// If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
	Wait *bool `json:"-"`
}

type SnapshotRecover struct {
	// If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
	Wait *bool `json:"-"`
	// Examples: - URL `http://localhost:8080/collections/my_collection/snapshots/my_snapshot` - Local path `file:///qdrant/snapshots/test_collection-2022-08-04-10-49-10.snapshot`
	Location string `json:"location"`
	// Defines which data should be used as a source of truth if there are other replicas in the cluster. If set to `Snapshot`, the snapshot will be used as a source of truth, and the current state will be overwritten. If set to `Replica`, the current state will be used as a source of truth, and after recovery if will be synchronized with the snapshot.
	Priority *core.Optional[SnapshotRecoverPriority] `json:"priority,omitempty"`
}

type RecoverFromUploadedSnapshotRequest struct {
	// If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
	Wait *bool `json:"-"`
	// Defines source of truth for snapshot recovery
	Priority *SnapshotPriority `json:"-"`
}

type ShardSnapshotRecover struct {
	// If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
	Wait     *bool                                        `json:"-"`
	Location ShardSnapshotLocation                        `json:"location"`
	Priority *core.Optional[ShardSnapshotRecoverPriority] `json:"priority,omitempty"`
}

type RecoverShardFromUploadedSnapshotRequest struct {
	// If true, wait for changes to actually happen. If false - let changes happen in background. Default is true.
	Wait *bool `json:"-"`
	// Defines source of truth for snapshot recovery
	Priority *SnapshotPriority `json:"-"`
}

type CreateFullSnapshotResponse struct {
	// Time spent to process this request
	Time   *float64             `json:"time,omitempty"`
	Status *string              `json:"status,omitempty"`
	Result *SnapshotDescription `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateFullSnapshotResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateFullSnapshotResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateFullSnapshotResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateFullSnapshotResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateShardSnapshotResponse struct {
	// Time spent to process this request
	Time   *float64             `json:"time,omitempty"`
	Status *string              `json:"status,omitempty"`
	Result *SnapshotDescription `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateShardSnapshotResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateShardSnapshotResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateShardSnapshotResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateShardSnapshotResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateSnapshotResponse struct {
	// Time spent to process this request
	Time   *float64             `json:"time,omitempty"`
	Status *string              `json:"status,omitempty"`
	Result *SnapshotDescription `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateSnapshotResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateSnapshotResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateSnapshotResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateSnapshotResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type DeleteFullSnapshotResponse struct {
	// Time spent to process this request
	Time   *float64 `json:"time,omitempty"`
	Status *string  `json:"status,omitempty"`
	Result *bool    `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeleteFullSnapshotResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteFullSnapshotResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteFullSnapshotResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteFullSnapshotResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeleteShardSnapshotResponse struct {
	// Time spent to process this request
	Time   *float64 `json:"time,omitempty"`
	Status *string  `json:"status,omitempty"`
	Result *bool    `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeleteShardSnapshotResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteShardSnapshotResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteShardSnapshotResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteShardSnapshotResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DeleteSnapshotResponse struct {
	// Time spent to process this request
	Time   *float64 `json:"time,omitempty"`
	Status *string  `json:"status,omitempty"`
	Result *bool    `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (d *DeleteSnapshotResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteSnapshotResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteSnapshotResponse(value)
	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteSnapshotResponse) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type ListFullSnapshotsResponse struct {
	// Time spent to process this request
	Time   *float64               `json:"time,omitempty"`
	Status *string                `json:"status,omitempty"`
	Result []*SnapshotDescription `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListFullSnapshotsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListFullSnapshotsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListFullSnapshotsResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListFullSnapshotsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListShardSnapshotsResponse struct {
	// Time spent to process this request
	Time   *float64               `json:"time,omitempty"`
	Status *string                `json:"status,omitempty"`
	Result []*SnapshotDescription `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListShardSnapshotsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListShardSnapshotsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListShardSnapshotsResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListShardSnapshotsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListSnapshotsResponse struct {
	// Time spent to process this request
	Time   *float64               `json:"time,omitempty"`
	Status *string                `json:"status,omitempty"`
	Result []*SnapshotDescription `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListSnapshotsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListSnapshotsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListSnapshotsResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListSnapshotsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type RecoverFromSnapshotResponse struct {
	// Time spent to process this request
	Time   *float64 `json:"time,omitempty"`
	Status *string  `json:"status,omitempty"`
	Result *bool    `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RecoverFromSnapshotResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RecoverFromSnapshotResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RecoverFromSnapshotResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RecoverFromSnapshotResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RecoverFromUploadedSnapshotResponse struct {
	// Time spent to process this request
	Time   *float64 `json:"time,omitempty"`
	Status *string  `json:"status,omitempty"`
	Result *bool    `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RecoverFromUploadedSnapshotResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RecoverFromUploadedSnapshotResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RecoverFromUploadedSnapshotResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RecoverFromUploadedSnapshotResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RecoverShardFromSnapshotResponse struct {
	// Time spent to process this request
	Time   *float64 `json:"time,omitempty"`
	Status *string  `json:"status,omitempty"`
	Result *bool    `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RecoverShardFromSnapshotResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RecoverShardFromSnapshotResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RecoverShardFromSnapshotResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RecoverShardFromSnapshotResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RecoverShardFromUploadedSnapshotResponse struct {
	// Time spent to process this request
	Time   *float64 `json:"time,omitempty"`
	Status *string  `json:"status,omitempty"`
	Result *bool    `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RecoverShardFromUploadedSnapshotResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RecoverShardFromUploadedSnapshotResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RecoverShardFromUploadedSnapshotResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RecoverShardFromUploadedSnapshotResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ShardSnapshotRecoverPriority struct {
	typeName         string
	SnapshotPriority SnapshotPriority
	Unknown          interface{}
}

func NewShardSnapshotRecoverPriorityFromSnapshotPriority(value SnapshotPriority) *ShardSnapshotRecoverPriority {
	return &ShardSnapshotRecoverPriority{typeName: "snapshotPriority", SnapshotPriority: value}
}

func NewShardSnapshotRecoverPriorityFromUnknown(value interface{}) *ShardSnapshotRecoverPriority {
	return &ShardSnapshotRecoverPriority{typeName: "unknown", Unknown: value}
}

func (s *ShardSnapshotRecoverPriority) UnmarshalJSON(data []byte) error {
	var valueSnapshotPriority SnapshotPriority
	if err := json.Unmarshal(data, &valueSnapshotPriority); err == nil {
		s.typeName = "snapshotPriority"
		s.SnapshotPriority = valueSnapshotPriority
		return nil
	}
	var valueUnknown interface{}
	if err := json.Unmarshal(data, &valueUnknown); err == nil {
		s.typeName = "unknown"
		s.Unknown = valueUnknown
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ShardSnapshotRecoverPriority) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "snapshotPriority":
		return json.Marshal(s.SnapshotPriority)
	case "unknown":
		return json.Marshal(s.Unknown)
	}
}

type ShardSnapshotRecoverPriorityVisitor interface {
	VisitSnapshotPriority(SnapshotPriority) error
	VisitUnknown(interface{}) error
}

func (s *ShardSnapshotRecoverPriority) Accept(visitor ShardSnapshotRecoverPriorityVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "snapshotPriority":
		return visitor.VisitSnapshotPriority(s.SnapshotPriority)
	case "unknown":
		return visitor.VisitUnknown(s.Unknown)
	}
}

// Defines which data should be used as a source of truth if there are other replicas in the cluster. If set to `Snapshot`, the snapshot will be used as a source of truth, and the current state will be overwritten. If set to `Replica`, the current state will be used as a source of truth, and after recovery if will be synchronized with the snapshot.
type SnapshotRecoverPriority struct {
	typeName         string
	SnapshotPriority SnapshotPriority
	Unknown          interface{}
}

func NewSnapshotRecoverPriorityFromSnapshotPriority(value SnapshotPriority) *SnapshotRecoverPriority {
	return &SnapshotRecoverPriority{typeName: "snapshotPriority", SnapshotPriority: value}
}

func NewSnapshotRecoverPriorityFromUnknown(value interface{}) *SnapshotRecoverPriority {
	return &SnapshotRecoverPriority{typeName: "unknown", Unknown: value}
}

func (s *SnapshotRecoverPriority) UnmarshalJSON(data []byte) error {
	var valueSnapshotPriority SnapshotPriority
	if err := json.Unmarshal(data, &valueSnapshotPriority); err == nil {
		s.typeName = "snapshotPriority"
		s.SnapshotPriority = valueSnapshotPriority
		return nil
	}
	var valueUnknown interface{}
	if err := json.Unmarshal(data, &valueUnknown); err == nil {
		s.typeName = "unknown"
		s.Unknown = valueUnknown
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SnapshotRecoverPriority) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "snapshotPriority":
		return json.Marshal(s.SnapshotPriority)
	case "unknown":
		return json.Marshal(s.Unknown)
	}
}

type SnapshotRecoverPriorityVisitor interface {
	VisitSnapshotPriority(SnapshotPriority) error
	VisitUnknown(interface{}) error
}

func (s *SnapshotRecoverPriority) Accept(visitor SnapshotRecoverPriorityVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "snapshotPriority":
		return visitor.VisitSnapshotPriority(s.SnapshotPriority)
	case "unknown":
		return visitor.VisitUnknown(s.Unknown)
	}
}
