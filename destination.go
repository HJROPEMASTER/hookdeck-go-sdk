// This file was auto-generated by Fern from our API Definition.

package api

import (
	fmt "fmt"
	core "github.com/hookdeck/hookdeck-go-sdk/core"
	time "time"
)

type DestinationCreateRequest struct {
	// Name for the destination
	Name string `json:"name"`
	// Description for the destination
	Description *core.Optional[string] `json:"description,omitempty"`
	// Endpoint of the destination
	Url *core.Optional[string] `json:"url,omitempty"`
	// Path for the CLI destination
	CliPath *core.Optional[string] `json:"cli_path,omitempty"`
	// Period to rate limit attempts
	RateLimitPeriod *core.Optional[DestinationCreateRequestRateLimitPeriod] `json:"rate_limit_period,omitempty"`
	// Limit event attempts to receive per period
	RateLimit              *core.Optional[int]                         `json:"rate_limit,omitempty"`
	HttpMethod             *core.Optional[DestinationHttpMethod]       `json:"http_method,omitempty"`
	AuthMethod             *core.Optional[DestinationAuthMethodConfig] `json:"auth_method,omitempty"`
	PathForwardingDisabled *core.Optional[bool]                        `json:"path_forwarding_disabled,omitempty"`
}

type DestinationListRequest struct {
	Id         *string                        `json:"-"`
	Name       *string                        `json:"-"`
	Archived   *bool                          `json:"-"`
	ArchivedAt *time.Time                     `json:"-"`
	Url        *string                        `json:"-"`
	CliPath    *string                        `json:"-"`
	OrderBy    *DestinationListRequestOrderBy `json:"-"`
	Dir        *DestinationListRequestDir     `json:"-"`
	Limit      *int                           `json:"-"`
	Next       *string                        `json:"-"`
	Prev       *string                        `json:"-"`
}

// Period to rate limit attempts
type DestinationCreateRequestRateLimitPeriod string

const (
	DestinationCreateRequestRateLimitPeriodSecond DestinationCreateRequestRateLimitPeriod = "second"
	DestinationCreateRequestRateLimitPeriodMinute DestinationCreateRequestRateLimitPeriod = "minute"
	DestinationCreateRequestRateLimitPeriodHour   DestinationCreateRequestRateLimitPeriod = "hour"
)

func NewDestinationCreateRequestRateLimitPeriodFromString(s string) (DestinationCreateRequestRateLimitPeriod, error) {
	switch s {
	case "second":
		return DestinationCreateRequestRateLimitPeriodSecond, nil
	case "minute":
		return DestinationCreateRequestRateLimitPeriodMinute, nil
	case "hour":
		return DestinationCreateRequestRateLimitPeriodHour, nil
	}
	var t DestinationCreateRequestRateLimitPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationCreateRequestRateLimitPeriod) Ptr() *DestinationCreateRequestRateLimitPeriod {
	return &d
}

type DestinationDeleteResponse struct {
	// ID of the destination
	Id string `json:"id"`
}

type DestinationListRequestDir string

const (
	DestinationListRequestDirAsc  DestinationListRequestDir = "asc"
	DestinationListRequestDirDesc DestinationListRequestDir = "desc"
)

func NewDestinationListRequestDirFromString(s string) (DestinationListRequestDir, error) {
	switch s {
	case "asc":
		return DestinationListRequestDirAsc, nil
	case "desc":
		return DestinationListRequestDirDesc, nil
	}
	var t DestinationListRequestDir
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationListRequestDir) Ptr() *DestinationListRequestDir {
	return &d
}

type DestinationListRequestOrderBy string

const (
	DestinationListRequestOrderByCreatedAt DestinationListRequestOrderBy = "created_at"
)

func NewDestinationListRequestOrderByFromString(s string) (DestinationListRequestOrderBy, error) {
	switch s {
	case "created_at":
		return DestinationListRequestOrderByCreatedAt, nil
	}
	var t DestinationListRequestOrderBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationListRequestOrderBy) Ptr() *DestinationListRequestOrderBy {
	return &d
}

// Period to rate limit attempts
type DestinationUpdateRequestRateLimitPeriod string

const (
	DestinationUpdateRequestRateLimitPeriodSecond DestinationUpdateRequestRateLimitPeriod = "second"
	DestinationUpdateRequestRateLimitPeriodMinute DestinationUpdateRequestRateLimitPeriod = "minute"
	DestinationUpdateRequestRateLimitPeriodHour   DestinationUpdateRequestRateLimitPeriod = "hour"
)

func NewDestinationUpdateRequestRateLimitPeriodFromString(s string) (DestinationUpdateRequestRateLimitPeriod, error) {
	switch s {
	case "second":
		return DestinationUpdateRequestRateLimitPeriodSecond, nil
	case "minute":
		return DestinationUpdateRequestRateLimitPeriodMinute, nil
	case "hour":
		return DestinationUpdateRequestRateLimitPeriodHour, nil
	}
	var t DestinationUpdateRequestRateLimitPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationUpdateRequestRateLimitPeriod) Ptr() *DestinationUpdateRequestRateLimitPeriod {
	return &d
}

// Period to rate limit attempts
type DestinationUpsertRequestRateLimitPeriod string

const (
	DestinationUpsertRequestRateLimitPeriodSecond DestinationUpsertRequestRateLimitPeriod = "second"
	DestinationUpsertRequestRateLimitPeriodMinute DestinationUpsertRequestRateLimitPeriod = "minute"
	DestinationUpsertRequestRateLimitPeriodHour   DestinationUpsertRequestRateLimitPeriod = "hour"
)

func NewDestinationUpsertRequestRateLimitPeriodFromString(s string) (DestinationUpsertRequestRateLimitPeriod, error) {
	switch s {
	case "second":
		return DestinationUpsertRequestRateLimitPeriodSecond, nil
	case "minute":
		return DestinationUpsertRequestRateLimitPeriodMinute, nil
	case "hour":
		return DestinationUpsertRequestRateLimitPeriodHour, nil
	}
	var t DestinationUpsertRequestRateLimitPeriod
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DestinationUpsertRequestRateLimitPeriod) Ptr() *DestinationUpsertRequestRateLimitPeriod {
	return &d
}

type DestinationUpdateRequest struct {
	// Name for the destination
	Name *core.Optional[string] `json:"name,omitempty"`
	// Description for the destination
	Description *core.Optional[string] `json:"description,omitempty"`
	// Endpoint of the destination
	Url *core.Optional[string] `json:"url,omitempty"`
	// Path for the CLI destination
	CliPath *core.Optional[string] `json:"cli_path,omitempty"`
	// Period to rate limit attempts
	RateLimitPeriod *core.Optional[DestinationUpdateRequestRateLimitPeriod] `json:"rate_limit_period,omitempty"`
	// Limit event attempts to receive per period
	RateLimit              *core.Optional[int]                         `json:"rate_limit,omitempty"`
	HttpMethod             *core.Optional[DestinationHttpMethod]       `json:"http_method,omitempty"`
	AuthMethod             *core.Optional[DestinationAuthMethodConfig] `json:"auth_method,omitempty"`
	PathForwardingDisabled *core.Optional[bool]                        `json:"path_forwarding_disabled,omitempty"`
}

type DestinationUpsertRequest struct {
	// Name for the destination
	Name string `json:"name"`
	// Description for the destination
	Description *core.Optional[string] `json:"description,omitempty"`
	// Endpoint of the destination
	Url *core.Optional[string] `json:"url,omitempty"`
	// Path for the CLI destination
	CliPath *core.Optional[string] `json:"cli_path,omitempty"`
	// Period to rate limit attempts
	RateLimitPeriod *core.Optional[DestinationUpsertRequestRateLimitPeriod] `json:"rate_limit_period,omitempty"`
	// Limit event attempts to receive per period
	RateLimit              *core.Optional[int]                         `json:"rate_limit,omitempty"`
	HttpMethod             *core.Optional[DestinationHttpMethod]       `json:"http_method,omitempty"`
	AuthMethod             *core.Optional[DestinationAuthMethodConfig] `json:"auth_method,omitempty"`
	PathForwardingDisabled *core.Optional[bool]                        `json:"path_forwarding_disabled,omitempty"`
}
