// This file was auto-generated by Fern from our API Definition.

package api

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	core "github.com/fern-hookdeck/hookdeck-go/core"
	io "io"
	http "net/http"
	url "net/url"
)

type EventsClient interface {
	GetEvents(ctx context.Context, request *GetEventsRequest) (*EventPaginatedResult, error)
	GetEvent(ctx context.Context, id string) (*Event, error)
	GetRequestRawBody(ctx context.Context, id string) (*RawBody, error)
	RetryEvent(ctx context.Context, id string) (*RetriedEvent, error)
	MuteEvent(ctx context.Context, id string) (*Event, error)
}

func NewEventsClient(opts ...core.ClientOption) EventsClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &eventsClient{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type eventsClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

func (e *eventsClient) GetEvents(ctx context.Context, request *GetEventsRequest) (*EventPaginatedResult, error) {
	baseURL := "https://api.hookdeck.com/2023-01-01"
	if e.baseURL != "" {
		baseURL = e.baseURL
	}
	endpointURL := baseURL + "/" + "events"

	queryParams := make(url.Values)
	var idDefaultValue *string
	if request.Id != idDefaultValue {
		queryParams.Add("id", fmt.Sprintf("%v", *request.Id))
	}
	var statusDefaultValue *EventStatus
	if request.Status != statusDefaultValue {
		queryParams.Add("status", fmt.Sprintf("%v", *request.Status))
	}
	var issueIdDefaultValue *string
	if request.IssueId != issueIdDefaultValue {
		queryParams.Add("issue_id", fmt.Sprintf("%v", *request.IssueId))
	}
	var webhookIdDefaultValue *string
	if request.WebhookId != webhookIdDefaultValue {
		queryParams.Add("webhook_id", fmt.Sprintf("%v", *request.WebhookId))
	}
	var destinationIdDefaultValue *string
	if request.DestinationId != destinationIdDefaultValue {
		queryParams.Add("destination_id", fmt.Sprintf("%v", *request.DestinationId))
	}
	var sourceIdDefaultValue *string
	if request.SourceId != sourceIdDefaultValue {
		queryParams.Add("source_id", fmt.Sprintf("%v", *request.SourceId))
	}
	var attemptsDefaultValue *int
	if request.Attempts != attemptsDefaultValue {
		queryParams.Add("attempts", fmt.Sprintf("%v", *request.Attempts))
	}
	var responseStatusDefaultValue *int
	if request.ResponseStatus != responseStatusDefaultValue {
		queryParams.Add("response_status", fmt.Sprintf("%v", *request.ResponseStatus))
	}
	var successfulAtDefaultValue *string
	if request.SuccessfulAt != successfulAtDefaultValue {
		queryParams.Add("successful_at", fmt.Sprintf("%v", *request.SuccessfulAt))
	}
	var createdAtDefaultValue *string
	if request.CreatedAt != createdAtDefaultValue {
		queryParams.Add("created_at", fmt.Sprintf("%v", *request.CreatedAt))
	}
	var errorCodeDefaultValue *string
	if request.ErrorCode != errorCodeDefaultValue {
		queryParams.Add("error_code", fmt.Sprintf("%v", *request.ErrorCode))
	}
	var cliIdDefaultValue *string
	if request.CliId != cliIdDefaultValue {
		queryParams.Add("cli_id", fmt.Sprintf("%v", *request.CliId))
	}
	var cliUserIdDefaultValue *string
	if request.CliUserId != cliUserIdDefaultValue {
		queryParams.Add("cli_user_id", fmt.Sprintf("%v", *request.CliUserId))
	}
	var lastAttemptAtDefaultValue *string
	if request.LastAttemptAt != lastAttemptAtDefaultValue {
		queryParams.Add("last_attempt_at", fmt.Sprintf("%v", *request.LastAttemptAt))
	}
	var eventDataIdDefaultValue *string
	if request.EventDataId != eventDataIdDefaultValue {
		queryParams.Add("event_data_id", fmt.Sprintf("%v", *request.EventDataId))
	}
	var headersDefaultValue *string
	if request.Headers != headersDefaultValue {
		queryParams.Add("headers", fmt.Sprintf("%v", *request.Headers))
	}
	var bodyDefaultValue *string
	if request.Body != bodyDefaultValue {
		queryParams.Add("body", fmt.Sprintf("%v", *request.Body))
	}
	var parsedQueryDefaultValue *string
	if request.ParsedQuery != parsedQueryDefaultValue {
		queryParams.Add("parsed_query", fmt.Sprintf("%v", *request.ParsedQuery))
	}
	var bulkRetryIdDefaultValue *string
	if request.BulkRetryId != bulkRetryIdDefaultValue {
		queryParams.Add("bulk_retry_id", fmt.Sprintf("%v", *request.BulkRetryId))
	}
	var pathDefaultValue *string
	if request.Path != pathDefaultValue {
		queryParams.Add("path", fmt.Sprintf("%v", *request.Path))
	}
	var includeDefaultValue *string
	if request.Include != includeDefaultValue {
		queryParams.Add("include", fmt.Sprintf("%v", *request.Include))
	}
	var orderByDefaultValue *GetEventsRequestOrderByGetEventsRequestOrderBy
	if request.OrderBy != orderByDefaultValue {
		queryParams.Add("order_by", fmt.Sprintf("%v", *request.OrderBy))
	}
	var dirDefaultValue *GetEventsRequestDirGetEventsRequestDir
	if request.Dir != dirDefaultValue {
		queryParams.Add("dir", fmt.Sprintf("%v", *request.Dir))
	}
	var limitDefaultValue *int
	if request.Limit != limitDefaultValue {
		queryParams.Add("limit", fmt.Sprintf("%v", *request.Limit))
	}
	var nextDefaultValue *string
	if request.Next != nextDefaultValue {
		queryParams.Add("next", fmt.Sprintf("%v", *request.Next))
	}
	var prevDefaultValue *string
	if request.Prev != prevDefaultValue {
		queryParams.Add("prev", fmt.Sprintf("%v", *request.Prev))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 422:
			value := new(UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(EventPaginatedResult)
	if err := core.DoRequest(
		ctx,
		e.httpClient,
		endpointURL,
		http.MethodGet,
		request,
		&response,
		e.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (e *eventsClient) GetEvent(ctx context.Context, id string) (*Event, error) {
	baseURL := "https://api.hookdeck.com/2023-01-01"
	if e.baseURL != "" {
		baseURL = e.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"events/%v", id)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(Event)
	if err := core.DoRequest(
		ctx,
		e.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		e.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (e *eventsClient) GetRequestRawBody(ctx context.Context, id string) (*RawBody, error) {
	baseURL := "https://api.hookdeck.com/2023-01-01"
	if e.baseURL != "" {
		baseURL = e.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"events/%v/raw_body", id)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(RawBody)
	if err := core.DoRequest(
		ctx,
		e.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		e.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (e *eventsClient) RetryEvent(ctx context.Context, id string) (*RetriedEvent, error) {
	baseURL := "https://api.hookdeck.com/2023-01-01"
	if e.baseURL != "" {
		baseURL = e.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"events/%v/retry", id)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(RetriedEvent)
	if err := core.DoRequest(
		ctx,
		e.httpClient,
		endpointURL,
		http.MethodPost,
		nil,
		&response,
		e.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (e *eventsClient) MuteEvent(ctx context.Context, id string) (*Event, error) {
	baseURL := "https://api.hookdeck.com/2023-01-01"
	if e.baseURL != "" {
		baseURL = e.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"events/%v/mute", id)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(Event)
	if err := core.DoRequest(
		ctx,
		e.httpClient,
		endpointURL,
		http.MethodPut,
		nil,
		&response,
		e.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}
