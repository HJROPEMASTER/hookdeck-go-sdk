// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/hookdeck/hookdeck-go-sdk/core"
)

type RemovePeerRequest struct {
	// If true - removes peer even if it has shards/replicas on it.
	Force *bool `json:"-"`
}

type ClusterStatusResponse struct {
	// Time spent to process this request
	Time   *float64       `json:"time,omitempty"`
	Status *string        `json:"status,omitempty"`
	Result *ClusterStatus `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (c *ClusterStatusResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ClusterStatusResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ClusterStatusResponse(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ClusterStatusResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type RecoverCurrentPeerResponse struct {
	// Time spent to process this request
	Time   *float64 `json:"time,omitempty"`
	Status *string  `json:"status,omitempty"`
	Result *bool    `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RecoverCurrentPeerResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RecoverCurrentPeerResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RecoverCurrentPeerResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RecoverCurrentPeerResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RemovePeerResponse struct {
	// Time spent to process this request
	Time   *float64 `json:"time,omitempty"`
	Status *string  `json:"status,omitempty"`
	Result *bool    `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RemovePeerResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RemovePeerResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RemovePeerResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RemovePeerResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
