// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type ShortEventDataParsedQuery struct {
	typeName                                           string
	StringOptional                                     *string
	ShortEventDataParsedQueryShortEventDataParsedQuery *ShortEventDataParsedQueryShortEventDataParsedQuery
}

func NewShortEventDataParsedQueryFromStringOptional(value *string) *ShortEventDataParsedQuery {
	return &ShortEventDataParsedQuery{typeName: "stringOptional", StringOptional: value}
}

func NewShortEventDataParsedQueryFromShortEventDataParsedQueryShortEventDataParsedQuery(value *ShortEventDataParsedQueryShortEventDataParsedQuery) *ShortEventDataParsedQuery {
	return &ShortEventDataParsedQuery{typeName: "shortEventDataParsedQueryShortEventDataParsedQuery", ShortEventDataParsedQueryShortEventDataParsedQuery: value}
}

func (s *ShortEventDataParsedQuery) UnmarshalJSON(data []byte) error {
	var valueStringOptional *string
	if err := json.Unmarshal(data, &valueStringOptional); err == nil {
		s.typeName = "stringOptional"
		s.StringOptional = valueStringOptional
		return nil
	}
	valueShortEventDataParsedQueryShortEventDataParsedQuery := new(ShortEventDataParsedQueryShortEventDataParsedQuery)
	if err := json.Unmarshal(data, &valueShortEventDataParsedQueryShortEventDataParsedQuery); err == nil {
		s.typeName = "shortEventDataParsedQueryShortEventDataParsedQuery"
		s.ShortEventDataParsedQueryShortEventDataParsedQuery = valueShortEventDataParsedQueryShortEventDataParsedQuery
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ShortEventDataParsedQuery) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "stringOptional":
		return json.Marshal(s.StringOptional)
	case "shortEventDataParsedQueryShortEventDataParsedQuery":
		return json.Marshal(s.ShortEventDataParsedQueryShortEventDataParsedQuery)
	}
}

type ShortEventDataParsedQueryVisitor interface {
	VisitStringOptional(*string) error
	VisitShortEventDataParsedQueryShortEventDataParsedQuery(*ShortEventDataParsedQueryShortEventDataParsedQuery) error
}

func (s *ShortEventDataParsedQuery) Accept(v ShortEventDataParsedQueryVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "stringOptional":
		return v.VisitStringOptional(s.StringOptional)
	case "shortEventDataParsedQueryShortEventDataParsedQuery":
		return v.VisitShortEventDataParsedQueryShortEventDataParsedQuery(s.ShortEventDataParsedQueryShortEventDataParsedQuery)
	}
}
