// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

// JSON using our filter syntax to filter on request headers
type ConnectionFilterProperty struct {
	typeName                                         string
	StringOptional                                   *string
	Double                                           float64
	Boolean                                          bool
	ConnectionFilterPropertyConnectionFilterProperty *ConnectionFilterPropertyConnectionFilterProperty
}

func NewConnectionFilterPropertyFromStringOptional(value *string) *ConnectionFilterProperty {
	return &ConnectionFilterProperty{typeName: "stringOptional", StringOptional: value}
}

func NewConnectionFilterPropertyFromDouble(value float64) *ConnectionFilterProperty {
	return &ConnectionFilterProperty{typeName: "double", Double: value}
}

func NewConnectionFilterPropertyFromBoolean(value bool) *ConnectionFilterProperty {
	return &ConnectionFilterProperty{typeName: "boolean", Boolean: value}
}

func NewConnectionFilterPropertyFromConnectionFilterPropertyConnectionFilterProperty(value *ConnectionFilterPropertyConnectionFilterProperty) *ConnectionFilterProperty {
	return &ConnectionFilterProperty{typeName: "connectionFilterPropertyConnectionFilterProperty", ConnectionFilterPropertyConnectionFilterProperty: value}
}

func (c *ConnectionFilterProperty) UnmarshalJSON(data []byte) error {
	var valueStringOptional *string
	if err := json.Unmarshal(data, &valueStringOptional); err == nil {
		c.typeName = "stringOptional"
		c.StringOptional = valueStringOptional
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		c.typeName = "double"
		c.Double = valueDouble
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		c.typeName = "boolean"
		c.Boolean = valueBoolean
		return nil
	}
	valueConnectionFilterPropertyConnectionFilterProperty := new(ConnectionFilterPropertyConnectionFilterProperty)
	if err := json.Unmarshal(data, &valueConnectionFilterPropertyConnectionFilterProperty); err == nil {
		c.typeName = "connectionFilterPropertyConnectionFilterProperty"
		c.ConnectionFilterPropertyConnectionFilterProperty = valueConnectionFilterPropertyConnectionFilterProperty
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c ConnectionFilterProperty) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "stringOptional":
		return json.Marshal(c.StringOptional)
	case "double":
		return json.Marshal(c.Double)
	case "boolean":
		return json.Marshal(c.Boolean)
	case "connectionFilterPropertyConnectionFilterProperty":
		return json.Marshal(c.ConnectionFilterPropertyConnectionFilterProperty)
	}
}

type ConnectionFilterPropertyVisitor interface {
	VisitStringOptional(*string) error
	VisitDouble(float64) error
	VisitBoolean(bool) error
	VisitConnectionFilterPropertyConnectionFilterProperty(*ConnectionFilterPropertyConnectionFilterProperty) error
}

func (c *ConnectionFilterProperty) Accept(v ConnectionFilterPropertyVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "stringOptional":
		return v.VisitStringOptional(c.StringOptional)
	case "double":
		return v.VisitDouble(c.Double)
	case "boolean":
		return v.VisitBoolean(c.Boolean)
	case "connectionFilterPropertyConnectionFilterProperty":
		return v.VisitConnectionFilterPropertyConnectionFilterProperty(c.ConnectionFilterPropertyConnectionFilterProperty)
	}
}
