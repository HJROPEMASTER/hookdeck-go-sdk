// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

// URL Encoded string of the JSON to match to the data headers
type CreateRequestBulkRetryRequestQueryHeaders struct {
	typeName                                                                           string
	String                                                                             string
	CreateRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders *CreateRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders
}

func NewCreateRequestBulkRetryRequestQueryHeadersFromString(value string) *CreateRequestBulkRetryRequestQueryHeaders {
	return &CreateRequestBulkRetryRequestQueryHeaders{typeName: "string", String: value}
}

func NewCreateRequestBulkRetryRequestQueryHeadersFromCreateRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders(value *CreateRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders) *CreateRequestBulkRetryRequestQueryHeaders {
	return &CreateRequestBulkRetryRequestQueryHeaders{typeName: "createRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders", CreateRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders: value}
}

func (c *CreateRequestBulkRetryRequestQueryHeaders) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueCreateRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders := new(CreateRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders)
	if err := json.Unmarshal(data, &valueCreateRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders); err == nil {
		c.typeName = "createRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders"
		c.CreateRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders = valueCreateRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreateRequestBulkRetryRequestQueryHeaders) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "createRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders":
		return json.Marshal(c.CreateRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders)
	}
}

type CreateRequestBulkRetryRequestQueryHeadersVisitor interface {
	VisitString(string) error
	VisitCreateRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders(*CreateRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders) error
}

func (c *CreateRequestBulkRetryRequestQueryHeaders) Accept(v CreateRequestBulkRetryRequestQueryHeadersVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return v.VisitString(c.String)
	case "createRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders":
		return v.VisitCreateRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders(c.CreateRequestBulkRetryRequestQueryHeadersCreateRequestBulkRetryRequestQueryHeaders)
	}
}
