// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type UpsertTransformationRequestEnvValue struct {
	typeName string
	String   string
	Double   float64
}

func NewUpsertTransformationRequestEnvValueFromString(value string) *UpsertTransformationRequestEnvValue {
	return &UpsertTransformationRequestEnvValue{typeName: "string", String: value}
}

func NewUpsertTransformationRequestEnvValueFromDouble(value float64) *UpsertTransformationRequestEnvValue {
	return &UpsertTransformationRequestEnvValue{typeName: "double", Double: value}
}

func (u *UpsertTransformationRequestEnvValue) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		u.typeName = "string"
		u.String = valueString
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		u.typeName = "double"
		u.Double = valueDouble
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, u)
}

func (u UpsertTransformationRequestEnvValue) MarshalJSON() ([]byte, error) {
	switch u.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "string":
		return json.Marshal(u.String)
	case "double":
		return json.Marshal(u.Double)
	}
}

type UpsertTransformationRequestEnvValueVisitor interface {
	VisitString(string) error
	VisitDouble(float64) error
}

func (u *UpsertTransformationRequestEnvValue) Accept(v UpsertTransformationRequestEnvValueVisitor) error {
	switch u.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", u.typeName, u)
	case "string":
		return v.VisitString(u.String)
	case "double":
		return v.VisitDouble(u.Double)
	}
}
