// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type IssueWithData struct {
	typeName                    string
	DeliveryIssueWithData       *DeliveryIssueWithData
	TransformationIssueWithData *TransformationIssueWithData
}

func NewIssueWithDataFromDeliveryIssueWithData(value *DeliveryIssueWithData) *IssueWithData {
	return &IssueWithData{typeName: "deliveryIssueWithData", DeliveryIssueWithData: value}
}

func NewIssueWithDataFromTransformationIssueWithData(value *TransformationIssueWithData) *IssueWithData {
	return &IssueWithData{typeName: "transformationIssueWithData", TransformationIssueWithData: value}
}

func (i *IssueWithData) UnmarshalJSON(data []byte) error {
	valueDeliveryIssueWithData := new(DeliveryIssueWithData)
	if err := json.Unmarshal(data, &valueDeliveryIssueWithData); err == nil {
		i.typeName = "deliveryIssueWithData"
		i.DeliveryIssueWithData = valueDeliveryIssueWithData
		return nil
	}
	valueTransformationIssueWithData := new(TransformationIssueWithData)
	if err := json.Unmarshal(data, &valueTransformationIssueWithData); err == nil {
		i.typeName = "transformationIssueWithData"
		i.TransformationIssueWithData = valueTransformationIssueWithData
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, i)
}

func (i IssueWithData) MarshalJSON() ([]byte, error) {
	switch i.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "deliveryIssueWithData":
		return json.Marshal(i.DeliveryIssueWithData)
	case "transformationIssueWithData":
		return json.Marshal(i.TransformationIssueWithData)
	}
}

type IssueWithDataVisitor interface {
	VisitDeliveryIssueWithData(*DeliveryIssueWithData) error
	VisitTransformationIssueWithData(*TransformationIssueWithData) error
}

func (i *IssueWithData) Accept(v IssueWithDataVisitor) error {
	switch i.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", i.typeName, i)
	case "deliveryIssueWithData":
		return v.VisitDeliveryIssueWithData(i.DeliveryIssueWithData)
	case "transformationIssueWithData":
		return v.VisitTransformationIssueWithData(i.TransformationIssueWithData)
	}
}
