// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type TransformationExecutorOutputRequestParsedQuery struct {
	typeName                                                                                     string
	StringOptional                                                                               *string
	TransformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery *TransformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery
}

func NewTransformationExecutorOutputRequestParsedQueryFromStringOptional(value *string) *TransformationExecutorOutputRequestParsedQuery {
	return &TransformationExecutorOutputRequestParsedQuery{typeName: "stringOptional", StringOptional: value}
}

func NewTransformationExecutorOutputRequestParsedQueryFromTransformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery(value *TransformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery) *TransformationExecutorOutputRequestParsedQuery {
	return &TransformationExecutorOutputRequestParsedQuery{typeName: "transformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery", TransformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery: value}
}

func (t *TransformationExecutorOutputRequestParsedQuery) UnmarshalJSON(data []byte) error {
	var valueStringOptional *string
	if err := json.Unmarshal(data, &valueStringOptional); err == nil {
		t.typeName = "stringOptional"
		t.StringOptional = valueStringOptional
		return nil
	}
	valueTransformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery := new(TransformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery)
	if err := json.Unmarshal(data, &valueTransformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery); err == nil {
		t.typeName = "transformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery"
		t.TransformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery = valueTransformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TransformationExecutorOutputRequestParsedQuery) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "stringOptional":
		return json.Marshal(t.StringOptional)
	case "transformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery":
		return json.Marshal(t.TransformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery)
	}
}

type TransformationExecutorOutputRequestParsedQueryVisitor interface {
	VisitStringOptional(*string) error
	VisitTransformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery(*TransformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery) error
}

func (t *TransformationExecutorOutputRequestParsedQuery) Accept(v TransformationExecutorOutputRequestParsedQueryVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "stringOptional":
		return v.VisitStringOptional(t.StringOptional)
	case "transformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery":
		return v.VisitTransformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery(t.TransformationExecutorOutputRequestParsedQueryTransformationExecutorOutputRequestParsedQuery)
	}
}
