// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type RequestDataBody struct {
	typeName                       string
	String                         string
	RequestDataBodyRequestDataBody *RequestDataBodyRequestDataBody
	UnknownList                    []any
}

func NewRequestDataBodyFromString(value string) *RequestDataBody {
	return &RequestDataBody{typeName: "string", String: value}
}

func NewRequestDataBodyFromRequestDataBodyRequestDataBody(value *RequestDataBodyRequestDataBody) *RequestDataBody {
	return &RequestDataBody{typeName: "requestDataBodyRequestDataBody", RequestDataBodyRequestDataBody: value}
}

func NewRequestDataBodyFromUnknownList(value []any) *RequestDataBody {
	return &RequestDataBody{typeName: "unknownList", UnknownList: value}
}

func (r *RequestDataBody) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.typeName = "string"
		r.String = valueString
		return nil
	}
	valueRequestDataBodyRequestDataBody := new(RequestDataBodyRequestDataBody)
	if err := json.Unmarshal(data, &valueRequestDataBodyRequestDataBody); err == nil {
		r.typeName = "requestDataBodyRequestDataBody"
		r.RequestDataBodyRequestDataBody = valueRequestDataBodyRequestDataBody
		return nil
	}
	var valueUnknownList []any
	if err := json.Unmarshal(data, &valueUnknownList); err == nil {
		r.typeName = "unknownList"
		r.UnknownList = valueUnknownList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RequestDataBody) MarshalJSON() ([]byte, error) {
	switch r.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return json.Marshal(r.String)
	case "requestDataBodyRequestDataBody":
		return json.Marshal(r.RequestDataBodyRequestDataBody)
	case "unknownList":
		return json.Marshal(r.UnknownList)
	}
}

type RequestDataBodyVisitor interface {
	VisitString(string) error
	VisitRequestDataBodyRequestDataBody(*RequestDataBodyRequestDataBody) error
	VisitUnknownList([]any) error
}

func (r *RequestDataBody) Accept(v RequestDataBodyVisitor) error {
	switch r.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", r.typeName, r)
	case "string":
		return v.VisitString(r.String)
	case "requestDataBodyRequestDataBody":
		return v.VisitRequestDataBodyRequestDataBody(r.RequestDataBodyRequestDataBody)
	case "unknownList":
		return v.VisitUnknownList(r.UnknownList)
	}
}
