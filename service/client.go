// This file was auto-generated by Fern from our API Definition.

package service

import (
	context "context"
	fmt "fmt"
	hookdeckgosdk "github.com/hookdeck/hookdeck-go-sdk"
	core "github.com/hookdeck/hookdeck-go-sdk/core"
	http "net/http"
	url "net/url"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...core.ClientOption) *Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &Client{
		baseURL: options.BaseURL,
		caller:  core.NewCaller(options.HTTPClient),
		header:  options.ToHeader(),
	}
}

// Collect telemetry data including app info, system info, collections info, cluster info, configs and statistics
func (c *Client) Telemetry(ctx context.Context, request *hookdeckgosdk.TelemetryRequest) (*hookdeckgosdk.TelemetryResponse, error) {
	baseURL := "http://localhost:6333"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "telemetry"

	queryParams := make(url.Values)
	if request.Anonymize != nil {
		queryParams.Add("anonymize", fmt.Sprintf("%v", *request.Anonymize))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *hookdeckgosdk.TelemetryResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Collect metrics data including app info, collections info, cluster info and statistics
func (c *Client) Metrics(ctx context.Context, request *hookdeckgosdk.MetricsRequest) (string, error) {
	baseURL := "http://localhost:6333"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "metrics"

	queryParams := make(url.Values)
	if request.Anonymize != nil {
		queryParams.Add("anonymize", fmt.Sprintf("%v", *request.Anonymize))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response string
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: response,
		},
	); err != nil {
		return "", err
	}
	return response, nil
}

// Get lock options. If write is locked, all write operations and collection creation are forbidden
func (c *Client) GetLocks(ctx context.Context) (*hookdeckgosdk.GetLocksResponse, error) {
	baseURL := "http://localhost:6333"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "locks"

	var response *hookdeckgosdk.GetLocksResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Set lock options. If write is locked, all write operations and collection creation are forbidden. Returns previous lock options
func (c *Client) PostLocks(ctx context.Context, request *hookdeckgosdk.LocksOption) (*hookdeckgosdk.PostLocksResponse, error) {
	baseURL := "http://localhost:6333"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "locks"

	var response *hookdeckgosdk.PostLocksResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodPost,
			Headers:  c.header,
			Request:  request,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// An endpoint for health checking used in Kubernetes.
func (c *Client) Healthz(ctx context.Context) (string, error) {
	baseURL := "http://localhost:6333"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "healthz"

	var response string
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: response,
		},
	); err != nil {
		return "", err
	}
	return response, nil
}

// An endpoint for health checking used in Kubernetes.
func (c *Client) Livez(ctx context.Context) (string, error) {
	baseURL := "http://localhost:6333"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "livez"

	var response string
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: response,
		},
	); err != nil {
		return "", err
	}
	return response, nil
}

// An endpoint for health checking used in Kubernetes.
func (c *Client) Readyz(ctx context.Context) (string, error) {
	baseURL := "http://localhost:6333"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "readyz"

	var response string
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: response,
		},
	); err != nil {
		return "", err
	}
	return response, nil
}
