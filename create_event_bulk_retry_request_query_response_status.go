// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

// Filter by HTTP response status code
type CreateEventBulkRetryRequestQueryResponseStatus struct {
	typeName                                                                                     string
	Integer                                                                                      int
	CreateEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus *CreateEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus
	IntegerList                                                                                  []int
}

func NewCreateEventBulkRetryRequestQueryResponseStatusFromInteger(value int) *CreateEventBulkRetryRequestQueryResponseStatus {
	return &CreateEventBulkRetryRequestQueryResponseStatus{typeName: "integer", Integer: value}
}

func NewCreateEventBulkRetryRequestQueryResponseStatusFromCreateEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus(value *CreateEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus) *CreateEventBulkRetryRequestQueryResponseStatus {
	return &CreateEventBulkRetryRequestQueryResponseStatus{typeName: "createEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus", CreateEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus: value}
}

func NewCreateEventBulkRetryRequestQueryResponseStatusFromIntegerList(value []int) *CreateEventBulkRetryRequestQueryResponseStatus {
	return &CreateEventBulkRetryRequestQueryResponseStatus{typeName: "integerList", IntegerList: value}
}

func (c *CreateEventBulkRetryRequestQueryResponseStatus) UnmarshalJSON(data []byte) error {
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		c.typeName = "integer"
		c.Integer = valueInteger
		return nil
	}
	valueCreateEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus := new(CreateEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus)
	if err := json.Unmarshal(data, &valueCreateEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus); err == nil {
		c.typeName = "createEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus"
		c.CreateEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus = valueCreateEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus
		return nil
	}
	var valueIntegerList []int
	if err := json.Unmarshal(data, &valueIntegerList); err == nil {
		c.typeName = "integerList"
		c.IntegerList = valueIntegerList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreateEventBulkRetryRequestQueryResponseStatus) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "integer":
		return json.Marshal(c.Integer)
	case "createEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus":
		return json.Marshal(c.CreateEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus)
	case "integerList":
		return json.Marshal(c.IntegerList)
	}
}

type CreateEventBulkRetryRequestQueryResponseStatusVisitor interface {
	VisitInteger(int) error
	VisitCreateEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus(*CreateEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus) error
	VisitIntegerList([]int) error
}

func (c *CreateEventBulkRetryRequestQueryResponseStatus) Accept(v CreateEventBulkRetryRequestQueryResponseStatusVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "integer":
		return v.VisitInteger(c.Integer)
	case "createEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus":
		return v.VisitCreateEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus(c.CreateEventBulkRetryRequestQueryResponseStatusCreateEventBulkRetryRequestQueryResponseStatus)
	case "integerList":
		return v.VisitIntegerList(c.IntegerList)
	}
}
