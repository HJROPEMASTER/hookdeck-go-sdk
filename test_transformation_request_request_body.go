// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

// Body of the request
type TestTransformationRequestRequestBody struct {
	typeName                                                                 string
	TestTransformationRequestRequestBodyTestTransformationRequestRequestBody *TestTransformationRequestRequestBodyTestTransformationRequestRequestBody
	String                                                                   string
}

func NewTestTransformationRequestRequestBodyFromTestTransformationRequestRequestBodyTestTransformationRequestRequestBody(value *TestTransformationRequestRequestBodyTestTransformationRequestRequestBody) *TestTransformationRequestRequestBody {
	return &TestTransformationRequestRequestBody{typeName: "testTransformationRequestRequestBodyTestTransformationRequestRequestBody", TestTransformationRequestRequestBodyTestTransformationRequestRequestBody: value}
}

func NewTestTransformationRequestRequestBodyFromString(value string) *TestTransformationRequestRequestBody {
	return &TestTransformationRequestRequestBody{typeName: "string", String: value}
}

func (t *TestTransformationRequestRequestBody) UnmarshalJSON(data []byte) error {
	valueTestTransformationRequestRequestBodyTestTransformationRequestRequestBody := new(TestTransformationRequestRequestBodyTestTransformationRequestRequestBody)
	if err := json.Unmarshal(data, &valueTestTransformationRequestRequestBodyTestTransformationRequestRequestBody); err == nil {
		t.typeName = "testTransformationRequestRequestBodyTestTransformationRequestRequestBody"
		t.TestTransformationRequestRequestBodyTestTransformationRequestRequestBody = valueTestTransformationRequestRequestBodyTestTransformationRequestRequestBody
		return nil
	}
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		t.typeName = "string"
		t.String = valueString
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TestTransformationRequestRequestBody) MarshalJSON() ([]byte, error) {
	switch t.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "testTransformationRequestRequestBodyTestTransformationRequestRequestBody":
		return json.Marshal(t.TestTransformationRequestRequestBodyTestTransformationRequestRequestBody)
	case "string":
		return json.Marshal(t.String)
	}
}

type TestTransformationRequestRequestBodyVisitor interface {
	VisitTestTransformationRequestRequestBodyTestTransformationRequestRequestBody(*TestTransformationRequestRequestBodyTestTransformationRequestRequestBody) error
	VisitString(string) error
}

func (t *TestTransformationRequestRequestBody) Accept(v TestTransformationRequestRequestBodyVisitor) error {
	switch t.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", t.typeName, t)
	case "testTransformationRequestRequestBodyTestTransformationRequestRequestBody":
		return v.VisitTestTransformationRequestRequestBodyTestTransformationRequestRequestBody(t.TestTransformationRequestRequestBodyTestTransformationRequestRequestBody)
	case "string":
		return v.VisitString(t.String)
	}
}
