// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

// Filter by number of attempts
type CreateEventBulkRetryRequestQueryAttempts struct {
	typeName                                                                         string
	Integer                                                                          int
	CreateEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts *CreateEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts
}

func NewCreateEventBulkRetryRequestQueryAttemptsFromInteger(value int) *CreateEventBulkRetryRequestQueryAttempts {
	return &CreateEventBulkRetryRequestQueryAttempts{typeName: "integer", Integer: value}
}

func NewCreateEventBulkRetryRequestQueryAttemptsFromCreateEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts(value *CreateEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts) *CreateEventBulkRetryRequestQueryAttempts {
	return &CreateEventBulkRetryRequestQueryAttempts{typeName: "createEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts", CreateEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts: value}
}

func (c *CreateEventBulkRetryRequestQueryAttempts) UnmarshalJSON(data []byte) error {
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		c.typeName = "integer"
		c.Integer = valueInteger
		return nil
	}
	valueCreateEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts := new(CreateEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts)
	if err := json.Unmarshal(data, &valueCreateEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts); err == nil {
		c.typeName = "createEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts"
		c.CreateEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts = valueCreateEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreateEventBulkRetryRequestQueryAttempts) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "integer":
		return json.Marshal(c.Integer)
	case "createEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts":
		return json.Marshal(c.CreateEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts)
	}
}

type CreateEventBulkRetryRequestQueryAttemptsVisitor interface {
	VisitInteger(int) error
	VisitCreateEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts(*CreateEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts) error
}

func (c *CreateEventBulkRetryRequestQueryAttempts) Accept(v CreateEventBulkRetryRequestQueryAttemptsVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "integer":
		return v.VisitInteger(c.Integer)
	case "createEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts":
		return v.VisitCreateEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts(c.CreateEventBulkRetryRequestQueryAttemptsCreateEventBulkRetryRequestQueryAttempts)
	}
}
