// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// The provider name
type IntegrationProvider uint8

const (
	IntegrationProviderTwitter IntegrationProvider = iota + 1
	IntegrationProviderStripe
	IntegrationProviderRecharge
	IntegrationProviderGithub
	IntegrationProviderShopify
	IntegrationProviderPostmark
	IntegrationProviderTypeform
	IntegrationProviderHmac
	IntegrationProviderBasicAuth
	IntegrationProviderApiKey
	IntegrationProviderXero
	IntegrationProviderSvix
	IntegrationProviderZoom
	IntegrationProviderAkeneo
	IntegrationProviderAdyen
	IntegrationProviderGitlab
	IntegrationProviderPropertyFinder
	IntegrationProviderWoocommerce
	IntegrationProviderOura
	IntegrationProviderCommercelayer
	IntegrationProviderMailgun
	IntegrationProviderPipedrive
	IntegrationProviderSendgrid
)

func (i IntegrationProvider) String() string {
	switch i {
	default:
		return strconv.Itoa(int(i))
	case IntegrationProviderTwitter:
		return "twitter"
	case IntegrationProviderStripe:
		return "stripe"
	case IntegrationProviderRecharge:
		return "recharge"
	case IntegrationProviderGithub:
		return "github"
	case IntegrationProviderShopify:
		return "shopify"
	case IntegrationProviderPostmark:
		return "postmark"
	case IntegrationProviderTypeform:
		return "typeform"
	case IntegrationProviderHmac:
		return "hmac"
	case IntegrationProviderBasicAuth:
		return "basic_auth"
	case IntegrationProviderApiKey:
		return "api_key"
	case IntegrationProviderXero:
		return "xero"
	case IntegrationProviderSvix:
		return "svix"
	case IntegrationProviderZoom:
		return "zoom"
	case IntegrationProviderAkeneo:
		return "akeneo"
	case IntegrationProviderAdyen:
		return "adyen"
	case IntegrationProviderGitlab:
		return "gitlab"
	case IntegrationProviderPropertyFinder:
		return "property-finder"
	case IntegrationProviderWoocommerce:
		return "woocommerce"
	case IntegrationProviderOura:
		return "oura"
	case IntegrationProviderCommercelayer:
		return "commercelayer"
	case IntegrationProviderMailgun:
		return "mailgun"
	case IntegrationProviderPipedrive:
		return "pipedrive"
	case IntegrationProviderSendgrid:
		return "sendgrid"
	}
}

func (i IntegrationProvider) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", i.String())), nil
}

func (i *IntegrationProvider) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "twitter":
		value := IntegrationProviderTwitter
		*i = value
	case "stripe":
		value := IntegrationProviderStripe
		*i = value
	case "recharge":
		value := IntegrationProviderRecharge
		*i = value
	case "github":
		value := IntegrationProviderGithub
		*i = value
	case "shopify":
		value := IntegrationProviderShopify
		*i = value
	case "postmark":
		value := IntegrationProviderPostmark
		*i = value
	case "typeform":
		value := IntegrationProviderTypeform
		*i = value
	case "hmac":
		value := IntegrationProviderHmac
		*i = value
	case "basic_auth":
		value := IntegrationProviderBasicAuth
		*i = value
	case "api_key":
		value := IntegrationProviderApiKey
		*i = value
	case "xero":
		value := IntegrationProviderXero
		*i = value
	case "svix":
		value := IntegrationProviderSvix
		*i = value
	case "zoom":
		value := IntegrationProviderZoom
		*i = value
	case "akeneo":
		value := IntegrationProviderAkeneo
		*i = value
	case "adyen":
		value := IntegrationProviderAdyen
		*i = value
	case "gitlab":
		value := IntegrationProviderGitlab
		*i = value
	case "property-finder":
		value := IntegrationProviderPropertyFinder
		*i = value
	case "woocommerce":
		value := IntegrationProviderWoocommerce
		*i = value
	case "oura":
		value := IntegrationProviderOura
		*i = value
	case "commercelayer":
		value := IntegrationProviderCommercelayer
		*i = value
	case "mailgun":
		value := IntegrationProviderMailgun
		*i = value
	case "pipedrive":
		value := IntegrationProviderPipedrive
		*i = value
	case "sendgrid":
		value := IntegrationProviderSendgrid
		*i = value
	}
	return nil
}
