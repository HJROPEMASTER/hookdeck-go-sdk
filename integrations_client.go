// This file was auto-generated by Fern from our API Definition.

package api

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	core "github.com/fern-hookdeck/hookdeck-go/core"
	io "io"
	http "net/http"
	url "net/url"
)

type IntegrationsClient interface {
	GetIntegrations(ctx context.Context, request *GetIntegrationsRequest) (*IntegrationPaginatedResult, error)
	CreateIntegration(ctx context.Context, request *CreateIntegrationRequest) (*Integration, error)
	GetIntegration(ctx context.Context, id string) (*Integration, error)
	UpdateIntegration(ctx context.Context, id string, request *UpdateIntegrationRequest) (*Integration, error)
	DeleteIntegration(ctx context.Context, id string) (*DeletedIntegration, error)
	AttachIntegrationToSource(ctx context.Context, id string, sourceId string) (*AttachedIntegrationToSource, error)
	DetachIntegrationToSource(ctx context.Context, id string, sourceId string) (*DetachedIntegrationFromSource, error)
}

func NewIntegrationsClient(opts ...core.ClientOption) IntegrationsClient {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &integrationsClient{
		baseURL:    options.BaseURL,
		httpClient: options.HTTPClient,
		header:     options.ToHeader(),
	}
}

type integrationsClient struct {
	baseURL    string
	httpClient core.HTTPClient
	header     http.Header
}

func (i *integrationsClient) GetIntegrations(ctx context.Context, request *GetIntegrationsRequest) (*IntegrationPaginatedResult, error) {
	baseURL := "https://api.hookdeck.com/2023-01-01"
	if i.baseURL != "" {
		baseURL = i.baseURL
	}
	endpointURL := baseURL + "/" + "integrations"

	queryParams := make(url.Values)
	var labelDefaultValue *string
	if request.Label != labelDefaultValue {
		queryParams.Add("label", fmt.Sprintf("%v", *request.Label))
	}
	var providerDefaultValue *IntegrationProvider
	if request.Provider != providerDefaultValue {
		queryParams.Add("provider", fmt.Sprintf("%v", *request.Provider))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 422:
			value := new(UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(IntegrationPaginatedResult)
	if err := core.DoRequest(
		ctx,
		i.httpClient,
		endpointURL,
		http.MethodGet,
		request,
		&response,
		i.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (i *integrationsClient) CreateIntegration(ctx context.Context, request *CreateIntegrationRequest) (*Integration, error) {
	baseURL := "https://api.hookdeck.com/2023-01-01"
	if i.baseURL != "" {
		baseURL = i.baseURL
	}
	endpointURL := baseURL + "/" + "integrations"

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 422:
			value := new(UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(Integration)
	if err := core.DoRequest(
		ctx,
		i.httpClient,
		endpointURL,
		http.MethodPost,
		request,
		&response,
		i.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (i *integrationsClient) GetIntegration(ctx context.Context, id string) (*Integration, error) {
	baseURL := "https://api.hookdeck.com/2023-01-01"
	if i.baseURL != "" {
		baseURL = i.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"integrations/%v", id)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(Integration)
	if err := core.DoRequest(
		ctx,
		i.httpClient,
		endpointURL,
		http.MethodGet,
		nil,
		&response,
		i.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (i *integrationsClient) UpdateIntegration(ctx context.Context, id string, request *UpdateIntegrationRequest) (*Integration, error) {
	baseURL := "https://api.hookdeck.com/2023-01-01"
	if i.baseURL != "" {
		baseURL = i.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"integrations/%v", id)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 422:
			value := new(UnprocessableEntityError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(Integration)
	if err := core.DoRequest(
		ctx,
		i.httpClient,
		endpointURL,
		http.MethodPut,
		request,
		&response,
		i.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (i *integrationsClient) DeleteIntegration(ctx context.Context, id string) (*DeletedIntegration, error) {
	baseURL := "https://api.hookdeck.com/2023-01-01"
	if i.baseURL != "" {
		baseURL = i.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"integrations/%v", id)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(DeletedIntegration)
	if err := core.DoRequest(
		ctx,
		i.httpClient,
		endpointURL,
		http.MethodDelete,
		nil,
		&response,
		i.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (i *integrationsClient) AttachIntegrationToSource(ctx context.Context, id string, sourceId string) (*AttachedIntegrationToSource, error) {
	baseURL := "https://api.hookdeck.com/2023-01-01"
	if i.baseURL != "" {
		baseURL = i.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"integrations/%v/attach/%v", id, sourceId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(AttachedIntegrationToSource)
	if err := core.DoRequest(
		ctx,
		i.httpClient,
		endpointURL,
		http.MethodPut,
		nil,
		&response,
		i.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}

func (i *integrationsClient) DetachIntegrationToSource(ctx context.Context, id string, sourceId string) (*DetachedIntegrationFromSource, error) {
	baseURL := "https://api.hookdeck.com/2023-01-01"
	if i.baseURL != "" {
		baseURL = i.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"integrations/%v/detach/%v", id, sourceId)

	errorDecoder := func(statusCode int, body io.Reader) error {
		raw, err := io.ReadAll(body)
		if err != nil {
			return err
		}
		apiError := core.NewAPIError(statusCode, errors.New(string(raw)))
		decoder := json.NewDecoder(bytes.NewReader(raw))
		switch statusCode {
		case 400:
			value := new(BadRequestError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		case 404:
			value := new(NotFoundError)
			value.APIError = apiError
			if err := decoder.Decode(value); err != nil {
				return err
			}
			return value
		}
		return apiError
	}

	response := new(DetachedIntegrationFromSource)
	if err := core.DoRequest(
		ctx,
		i.httpClient,
		endpointURL,
		http.MethodPut,
		nil,
		&response,
		i.header,
		errorDecoder,
	); err != nil {
		return response, err
	}
	return response, nil
}
