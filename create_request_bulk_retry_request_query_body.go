// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

// URL Encoded string of the JSON to match to the data body
type CreateRequestBulkRetryRequestQueryBody struct {
	typeName                                                                     string
	String                                                                       string
	CreateRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody *CreateRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody
}

func NewCreateRequestBulkRetryRequestQueryBodyFromString(value string) *CreateRequestBulkRetryRequestQueryBody {
	return &CreateRequestBulkRetryRequestQueryBody{typeName: "string", String: value}
}

func NewCreateRequestBulkRetryRequestQueryBodyFromCreateRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody(value *CreateRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody) *CreateRequestBulkRetryRequestQueryBody {
	return &CreateRequestBulkRetryRequestQueryBody{typeName: "createRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody", CreateRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody: value}
}

func (c *CreateRequestBulkRetryRequestQueryBody) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueCreateRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody := new(CreateRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody)
	if err := json.Unmarshal(data, &valueCreateRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody); err == nil {
		c.typeName = "createRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody"
		c.CreateRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody = valueCreateRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreateRequestBulkRetryRequestQueryBody) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "createRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody":
		return json.Marshal(c.CreateRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody)
	}
}

type CreateRequestBulkRetryRequestQueryBodyVisitor interface {
	VisitString(string) error
	VisitCreateRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody(*CreateRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody) error
}

func (c *CreateRequestBulkRetryRequestQueryBody) Accept(v CreateRequestBulkRetryRequestQueryBodyVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return v.VisitString(c.String)
	case "createRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody":
		return v.VisitCreateRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody(c.CreateRequestBulkRetryRequestQueryBodyCreateRequestBulkRetryRequestQueryBody)
	}
}
