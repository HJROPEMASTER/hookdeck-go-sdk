// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/hookdeck/hookdeck-go-sdk/core"
)

type MetricsRequest struct {
	// If true, anonymize result
	Anonymize *bool `json:"-"`
}

type TelemetryRequest struct {
	// If true, anonymize result
	Anonymize *bool `json:"-"`
}

type GetLocksResponse struct {
	// Time spent to process this request
	Time   *float64     `json:"time,omitempty"`
	Status *string      `json:"status,omitempty"`
	Result *LocksOption `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GetLocksResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetLocksResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetLocksResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetLocksResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type PostLocksResponse struct {
	// Time spent to process this request
	Time   *float64     `json:"time,omitempty"`
	Status *string      `json:"status,omitempty"`
	Result *LocksOption `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (p *PostLocksResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PostLocksResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PostLocksResponse(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PostLocksResponse) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type TelemetryResponse struct {
	// Time spent to process this request
	Time   *float64       `json:"time,omitempty"`
	Status *string        `json:"status,omitempty"`
	Result *TelemetryData `json:"result,omitempty"`

	_rawJSON json.RawMessage
}

func (t *TelemetryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TelemetryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TelemetryResponse(value)
	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TelemetryResponse) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
