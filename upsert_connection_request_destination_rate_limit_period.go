// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Period to rate limit attempts
type UpsertConnectionRequestDestinationRateLimitPeriod uint8

const (
	UpsertConnectionRequestDestinationRateLimitPeriodSecond UpsertConnectionRequestDestinationRateLimitPeriod = iota + 1
	UpsertConnectionRequestDestinationRateLimitPeriodMinute
	UpsertConnectionRequestDestinationRateLimitPeriodHour
)

func (u UpsertConnectionRequestDestinationRateLimitPeriod) String() string {
	switch u {
	default:
		return strconv.Itoa(int(u))
	case UpsertConnectionRequestDestinationRateLimitPeriodSecond:
		return "second"
	case UpsertConnectionRequestDestinationRateLimitPeriodMinute:
		return "minute"
	case UpsertConnectionRequestDestinationRateLimitPeriodHour:
		return "hour"
	}
}

func (u UpsertConnectionRequestDestinationRateLimitPeriod) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", u.String())), nil
}

func (u *UpsertConnectionRequestDestinationRateLimitPeriod) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "second":
		value := UpsertConnectionRequestDestinationRateLimitPeriodSecond
		*u = value
	case "minute":
		value := UpsertConnectionRequestDestinationRateLimitPeriodMinute
		*u = value
	case "hour":
		value := UpsertConnectionRequestDestinationRateLimitPeriodHour
		*u = value
	}
	return nil
}
