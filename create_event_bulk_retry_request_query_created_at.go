// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

// Filter by `created_at` date using a date operator
type CreateEventBulkRetryRequestQueryCreatedAt struct {
	typeName                                                                           string
	String                                                                             string
	CreateEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt *CreateEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt
}

func NewCreateEventBulkRetryRequestQueryCreatedAtFromString(value string) *CreateEventBulkRetryRequestQueryCreatedAt {
	return &CreateEventBulkRetryRequestQueryCreatedAt{typeName: "string", String: value}
}

func NewCreateEventBulkRetryRequestQueryCreatedAtFromCreateEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt(value *CreateEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt) *CreateEventBulkRetryRequestQueryCreatedAt {
	return &CreateEventBulkRetryRequestQueryCreatedAt{typeName: "createEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt", CreateEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt: value}
}

func (c *CreateEventBulkRetryRequestQueryCreatedAt) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueCreateEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt := new(CreateEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt)
	if err := json.Unmarshal(data, &valueCreateEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt); err == nil {
		c.typeName = "createEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt"
		c.CreateEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt = valueCreateEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreateEventBulkRetryRequestQueryCreatedAt) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "createEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt":
		return json.Marshal(c.CreateEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt)
	}
}

type CreateEventBulkRetryRequestQueryCreatedAtVisitor interface {
	VisitString(string) error
	VisitCreateEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt(*CreateEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt) error
}

func (c *CreateEventBulkRetryRequestQueryCreatedAt) Accept(v CreateEventBulkRetryRequestQueryCreatedAtVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return v.VisitString(c.String)
	case "createEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt":
		return v.VisitCreateEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt(c.CreateEventBulkRetryRequestQueryCreatedAtCreateEventBulkRetryRequestQueryCreatedAt)
	}
}
