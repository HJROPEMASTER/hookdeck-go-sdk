// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type EventDataBody struct {
	typeName                   string
	String                     string
	EventDataBodyEventDataBody *EventDataBodyEventDataBody
	UnknownList                []any
}

func NewEventDataBodyFromString(value string) *EventDataBody {
	return &EventDataBody{typeName: "string", String: value}
}

func NewEventDataBodyFromEventDataBodyEventDataBody(value *EventDataBodyEventDataBody) *EventDataBody {
	return &EventDataBody{typeName: "eventDataBodyEventDataBody", EventDataBodyEventDataBody: value}
}

func NewEventDataBodyFromUnknownList(value []any) *EventDataBody {
	return &EventDataBody{typeName: "unknownList", UnknownList: value}
}

func (e *EventDataBody) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		e.typeName = "string"
		e.String = valueString
		return nil
	}
	valueEventDataBodyEventDataBody := new(EventDataBodyEventDataBody)
	if err := json.Unmarshal(data, &valueEventDataBodyEventDataBody); err == nil {
		e.typeName = "eventDataBodyEventDataBody"
		e.EventDataBodyEventDataBody = valueEventDataBodyEventDataBody
		return nil
	}
	var valueUnknownList []any
	if err := json.Unmarshal(data, &valueUnknownList); err == nil {
		e.typeName = "unknownList"
		e.UnknownList = valueUnknownList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, e)
}

func (e EventDataBody) MarshalJSON() ([]byte, error) {
	switch e.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return json.Marshal(e.String)
	case "eventDataBodyEventDataBody":
		return json.Marshal(e.EventDataBodyEventDataBody)
	case "unknownList":
		return json.Marshal(e.UnknownList)
	}
}

type EventDataBodyVisitor interface {
	VisitString(string) error
	VisitEventDataBodyEventDataBody(*EventDataBodyEventDataBody) error
	VisitUnknownList([]any) error
}

func (e *EventDataBody) Accept(v EventDataBodyVisitor) error {
	switch e.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", e.typeName, e)
	case "string":
		return v.VisitString(e.String)
	case "eventDataBodyEventDataBody":
		return v.VisitEventDataBodyEventDataBody(e.EventDataBodyEventDataBody)
	case "unknownList":
		return v.VisitUnknownList(e.UnknownList)
	}
}
