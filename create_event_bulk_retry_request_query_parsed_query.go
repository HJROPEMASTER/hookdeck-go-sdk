// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

// URL Encoded string of the JSON to match to the parsed query (JSON representation of the query)
type CreateEventBulkRetryRequestQueryParsedQuery struct {
	typeName                                                                               string
	String                                                                                 string
	CreateEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery *CreateEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery
}

func NewCreateEventBulkRetryRequestQueryParsedQueryFromString(value string) *CreateEventBulkRetryRequestQueryParsedQuery {
	return &CreateEventBulkRetryRequestQueryParsedQuery{typeName: "string", String: value}
}

func NewCreateEventBulkRetryRequestQueryParsedQueryFromCreateEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery(value *CreateEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery) *CreateEventBulkRetryRequestQueryParsedQuery {
	return &CreateEventBulkRetryRequestQueryParsedQuery{typeName: "createEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery", CreateEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery: value}
}

func (c *CreateEventBulkRetryRequestQueryParsedQuery) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		c.typeName = "string"
		c.String = valueString
		return nil
	}
	valueCreateEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery := new(CreateEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery)
	if err := json.Unmarshal(data, &valueCreateEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery); err == nil {
		c.typeName = "createEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery"
		c.CreateEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery = valueCreateEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, c)
}

func (c CreateEventBulkRetryRequestQueryParsedQuery) MarshalJSON() ([]byte, error) {
	switch c.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return json.Marshal(c.String)
	case "createEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery":
		return json.Marshal(c.CreateEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery)
	}
}

type CreateEventBulkRetryRequestQueryParsedQueryVisitor interface {
	VisitString(string) error
	VisitCreateEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery(*CreateEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery) error
}

func (c *CreateEventBulkRetryRequestQueryParsedQuery) Accept(v CreateEventBulkRetryRequestQueryParsedQueryVisitor) error {
	switch c.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", c.typeName, c)
	case "string":
		return v.VisitString(c.String)
	case "createEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery":
		return v.VisitCreateEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery(c.CreateEventBulkRetryRequestQueryParsedQueryCreateEventBulkRetryRequestQueryParsedQuery)
	}
}
