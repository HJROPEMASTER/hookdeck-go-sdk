// This file was auto-generated by Fern from our API Definition.

package api

import (
	fmt "fmt"
	core "github.com/hookdeck/hookdeck-go-sdk/core"
	time "time"
)

type ConnectionCountRequest struct {
	DestinationId *string    `json:"-"`
	SourceId      *string    `json:"-"`
	Disabled      *bool      `json:"-"`
	DisabledAt    *time.Time `json:"-"`
	PausedAt      *time.Time `json:"-"`
}

type ConnectionCreateRequest struct {
	// A unique name of the connection for the source
	Name *core.Optional[string] `json:"name,omitempty"`
	// Description for the connection
	Description *core.Optional[string] `json:"description,omitempty"`
	// ID of a destination to bind to the connection
	DestinationId *core.Optional[string] `json:"destination_id,omitempty"`
	// ID of a source to bind to the connection
	SourceId *core.Optional[string] `json:"source_id,omitempty"`
	// Destination input object
	Destination *core.Optional[ConnectionCreateRequestDestination] `json:"destination,omitempty"`
	// Source input object
	Source *core.Optional[ConnectionCreateRequestSource] `json:"source,omitempty"`
	Rules  *core.Optional[[]*Rule]                       `json:"rules,omitempty"`
}

type ConnectionListRequest struct {
	Id            *string                       `json:"-"`
	Name          *string                       `json:"-"`
	DestinationId *string                       `json:"-"`
	SourceId      *string                       `json:"-"`
	Disabled      *bool                         `json:"-"`
	DisabledAt    *time.Time                    `json:"-"`
	FullName      *string                       `json:"-"`
	PausedAt      *time.Time                    `json:"-"`
	OrderBy       *ConnectionListRequestOrderBy `json:"-"`
	Dir           *ConnectionListRequestDir     `json:"-"`
	Limit         *int                          `json:"-"`
	Next          *string                       `json:"-"`
	Prev          *string                       `json:"-"`
}

type ConnectionCountResponse struct {
	// Count of connections
	Count float64 `json:"count"`
}

// Destination input object
type ConnectionCreateRequestDestination struct {
	// Name for the destination
	Name string `json:"name"`
	// Description for the destination
	Description *string `json:"description,omitempty"`
	// Endpoint of the destination
	Url *string `json:"url,omitempty"`
	// Path for the CLI destination
	CliPath *string `json:"cli_path,omitempty"`
	// Period to rate limit attempts
	RateLimitPeriod *ConnectionCreateRequestDestinationRateLimitPeriod `json:"rate_limit_period,omitempty"`
	// Limit event attempts to receive per period
	RateLimit              *int                         `json:"rate_limit,omitempty"`
	HttpMethod             *DestinationHttpMethod       `json:"http_method,omitempty"`
	AuthMethod             *DestinationAuthMethodConfig `json:"auth_method,omitempty"`
	PathForwardingDisabled *bool                        `json:"path_forwarding_disabled,omitempty"`
}

// Source input object
type ConnectionCreateRequestSource struct {
	// A unique name for the source
	Name string `json:"name"`
	// Description for the source
	Description        *string                  `json:"description,omitempty"`
	AllowedHttpMethods *SourceAllowedHttpMethod `json:"allowed_http_methods,omitempty"`
	CustomResponse     *SourceCustomResponse    `json:"custom_response,omitempty"`
	Verification       *VerificationConfig      `json:"verification,omitempty"`
}

type ConnectionDeleteResponse struct {
	// ID of the connection
	Id string `json:"id"`
}

type ConnectionListRequestDir string

const (
	ConnectionListRequestDirAsc  ConnectionListRequestDir = "asc"
	ConnectionListRequestDirDesc ConnectionListRequestDir = "desc"
)

func NewConnectionListRequestDirFromString(s string) (ConnectionListRequestDir, error) {
	switch s {
	case "asc":
		return ConnectionListRequestDirAsc, nil
	case "desc":
		return ConnectionListRequestDirDesc, nil
	}
	var t ConnectionListRequestDir
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConnectionListRequestDir) Ptr() *ConnectionListRequestDir {
	return &c
}

type ConnectionListRequestOrderBy string

const (
	ConnectionListRequestOrderByCreatedAt             ConnectionListRequestOrderBy = "created_at"
	ConnectionListRequestOrderByUpdatedAt             ConnectionListRequestOrderBy = "updated_at"
	ConnectionListRequestOrderBySourcesUpdatedAt      ConnectionListRequestOrderBy = "sources.updated_at"
	ConnectionListRequestOrderBySourcesCreatedAt      ConnectionListRequestOrderBy = "sources.created_at"
	ConnectionListRequestOrderByDestinationsUpdatedAt ConnectionListRequestOrderBy = "destinations.updated_at"
	ConnectionListRequestOrderByDestinationsCreatedAt ConnectionListRequestOrderBy = "destinations.created_at"
)

func NewConnectionListRequestOrderByFromString(s string) (ConnectionListRequestOrderBy, error) {
	switch s {
	case "created_at":
		return ConnectionListRequestOrderByCreatedAt, nil
	case "updated_at":
		return ConnectionListRequestOrderByUpdatedAt, nil
	case "sources.updated_at":
		return ConnectionListRequestOrderBySourcesUpdatedAt, nil
	case "sources.created_at":
		return ConnectionListRequestOrderBySourcesCreatedAt, nil
	case "destinations.updated_at":
		return ConnectionListRequestOrderByDestinationsUpdatedAt, nil
	case "destinations.created_at":
		return ConnectionListRequestOrderByDestinationsCreatedAt, nil
	}
	var t ConnectionListRequestOrderBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ConnectionListRequestOrderBy) Ptr() *ConnectionListRequestOrderBy {
	return &c
}

// Destination input object
type ConnectionUpsertRequestDestination struct {
	// Name for the destination
	Name string `json:"name"`
	// Description for the destination
	Description *string `json:"description,omitempty"`
	// Endpoint of the destination
	Url *string `json:"url,omitempty"`
	// Path for the CLI destination
	CliPath *string `json:"cli_path,omitempty"`
	// Period to rate limit attempts
	RateLimitPeriod *ConnectionUpsertRequestDestinationRateLimitPeriod `json:"rate_limit_period,omitempty"`
	// Limit event attempts to receive per period
	RateLimit              *int                         `json:"rate_limit,omitempty"`
	HttpMethod             *DestinationHttpMethod       `json:"http_method,omitempty"`
	AuthMethod             *DestinationAuthMethodConfig `json:"auth_method,omitempty"`
	PathForwardingDisabled *bool                        `json:"path_forwarding_disabled,omitempty"`
}

// Source input object
type ConnectionUpsertRequestSource struct {
	// A unique name for the source
	Name string `json:"name"`
	// Description for the source
	Description        *string                  `json:"description,omitempty"`
	AllowedHttpMethods *SourceAllowedHttpMethod `json:"allowed_http_methods,omitempty"`
	CustomResponse     *SourceCustomResponse    `json:"custom_response,omitempty"`
	Verification       *VerificationConfig      `json:"verification,omitempty"`
}

type ConnectionUpdateRequest struct {
	Name *core.Optional[string] `json:"name,omitempty"`
	// Description for the connection
	Description *core.Optional[string]  `json:"description,omitempty"`
	Rules       *core.Optional[[]*Rule] `json:"rules,omitempty"`
}

type ConnectionUpsertRequest struct {
	// A unique name of the connection for the source
	Name *core.Optional[string] `json:"name,omitempty"`
	// Description for the connection
	Description *core.Optional[string] `json:"description,omitempty"`
	// ID of a destination to bind to the connection
	DestinationId *core.Optional[string] `json:"destination_id,omitempty"`
	// ID of a source to bind to the connection
	SourceId *core.Optional[string] `json:"source_id,omitempty"`
	// Destination input object
	Destination *core.Optional[ConnectionUpsertRequestDestination] `json:"destination,omitempty"`
	// Source input object
	Source *core.Optional[ConnectionUpsertRequestSource] `json:"source,omitempty"`
	Rules  *core.Optional[[]*Rule]                       `json:"rules,omitempty"`
}
