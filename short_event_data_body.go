// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type ShortEventDataBody struct {
	typeName                             string
	String                               string
	ShortEventDataBodyShortEventDataBody *ShortEventDataBodyShortEventDataBody
	UnknownList                          []any
}

func NewShortEventDataBodyFromString(value string) *ShortEventDataBody {
	return &ShortEventDataBody{typeName: "string", String: value}
}

func NewShortEventDataBodyFromShortEventDataBodyShortEventDataBody(value *ShortEventDataBodyShortEventDataBody) *ShortEventDataBody {
	return &ShortEventDataBody{typeName: "shortEventDataBodyShortEventDataBody", ShortEventDataBodyShortEventDataBody: value}
}

func NewShortEventDataBodyFromUnknownList(value []any) *ShortEventDataBody {
	return &ShortEventDataBody{typeName: "unknownList", UnknownList: value}
}

func (s *ShortEventDataBody) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	valueShortEventDataBodyShortEventDataBody := new(ShortEventDataBodyShortEventDataBody)
	if err := json.Unmarshal(data, &valueShortEventDataBodyShortEventDataBody); err == nil {
		s.typeName = "shortEventDataBodyShortEventDataBody"
		s.ShortEventDataBodyShortEventDataBody = valueShortEventDataBodyShortEventDataBody
		return nil
	}
	var valueUnknownList []any
	if err := json.Unmarshal(data, &valueUnknownList); err == nil {
		s.typeName = "unknownList"
		s.UnknownList = valueUnknownList
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s ShortEventDataBody) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "shortEventDataBodyShortEventDataBody":
		return json.Marshal(s.ShortEventDataBodyShortEventDataBody)
	case "unknownList":
		return json.Marshal(s.UnknownList)
	}
}

type ShortEventDataBodyVisitor interface {
	VisitString(string) error
	VisitShortEventDataBodyShortEventDataBody(*ShortEventDataBodyShortEventDataBody) error
	VisitUnknownList([]any) error
}

func (s *ShortEventDataBody) Accept(v ShortEventDataBodyVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return v.VisitString(s.String)
	case "shortEventDataBodyShortEventDataBody":
		return v.VisitShortEventDataBodyShortEventDataBody(s.ShortEventDataBodyShortEventDataBody)
	case "unknownList":
		return v.VisitUnknownList(s.UnknownList)
	}
}
