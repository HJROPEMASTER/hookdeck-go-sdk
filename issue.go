// This file was auto-generated by Fern from our API Definition.

package api

import (
	fmt "fmt"
	time "time"
)

type IssueCountRequest struct {
	Id             *string                   `json:"-"`
	IssueTriggerId *string                   `json:"-"`
	Type           *IssueCountRequestType    `json:"-"`
	Status         *IssueCountRequestStatus  `json:"-"`
	MergedWith     *string                   `json:"-"`
	CreatedAt      *time.Time                `json:"-"`
	FirstSeenAt    *time.Time                `json:"-"`
	LastSeenAt     *time.Time                `json:"-"`
	DismissedAt    *time.Time                `json:"-"`
	OrderBy        *IssueCountRequestOrderBy `json:"-"`
	Dir            *IssueCountRequestDir     `json:"-"`
	Limit          *int                      `json:"-"`
	Next           *string                   `json:"-"`
	Prev           *string                   `json:"-"`
}

type IssueListRequest struct {
	Id             *string                  `json:"-"`
	IssueTriggerId *string                  `json:"-"`
	Type           *IssueListRequestType    `json:"-"`
	Status         *IssueListRequestStatus  `json:"-"`
	MergedWith     *string                  `json:"-"`
	CreatedAt      *time.Time               `json:"-"`
	FirstSeenAt    *time.Time               `json:"-"`
	LastSeenAt     *time.Time               `json:"-"`
	DismissedAt    *time.Time               `json:"-"`
	OrderBy        *IssueListRequestOrderBy `json:"-"`
	Dir            *IssueListRequestDir     `json:"-"`
	Limit          *int                     `json:"-"`
	Next           *string                  `json:"-"`
	Prev           *string                  `json:"-"`
}

type IssueCountRequestDir string

const (
	IssueCountRequestDirAsc  IssueCountRequestDir = "asc"
	IssueCountRequestDirDesc IssueCountRequestDir = "desc"
)

func NewIssueCountRequestDirFromString(s string) (IssueCountRequestDir, error) {
	switch s {
	case "asc":
		return IssueCountRequestDirAsc, nil
	case "desc":
		return IssueCountRequestDirDesc, nil
	}
	var t IssueCountRequestDir
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IssueCountRequestDir) Ptr() *IssueCountRequestDir {
	return &i
}

type IssueCountRequestOrderBy string

const (
	IssueCountRequestOrderByCreatedAt   IssueCountRequestOrderBy = "created_at"
	IssueCountRequestOrderByFirstSeenAt IssueCountRequestOrderBy = "first_seen_at"
	IssueCountRequestOrderByLastSeenAt  IssueCountRequestOrderBy = "last_seen_at"
	IssueCountRequestOrderByOpenedAt    IssueCountRequestOrderBy = "opened_at"
	IssueCountRequestOrderByStatus      IssueCountRequestOrderBy = "status"
)

func NewIssueCountRequestOrderByFromString(s string) (IssueCountRequestOrderBy, error) {
	switch s {
	case "created_at":
		return IssueCountRequestOrderByCreatedAt, nil
	case "first_seen_at":
		return IssueCountRequestOrderByFirstSeenAt, nil
	case "last_seen_at":
		return IssueCountRequestOrderByLastSeenAt, nil
	case "opened_at":
		return IssueCountRequestOrderByOpenedAt, nil
	case "status":
		return IssueCountRequestOrderByStatus, nil
	}
	var t IssueCountRequestOrderBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IssueCountRequestOrderBy) Ptr() *IssueCountRequestOrderBy {
	return &i
}

type IssueCountRequestStatus string

const (
	IssueCountRequestStatusOpened       IssueCountRequestStatus = "OPENED"
	IssueCountRequestStatusIgnored      IssueCountRequestStatus = "IGNORED"
	IssueCountRequestStatusAcknowledged IssueCountRequestStatus = "ACKNOWLEDGED"
	IssueCountRequestStatusResolved     IssueCountRequestStatus = "RESOLVED"
)

func NewIssueCountRequestStatusFromString(s string) (IssueCountRequestStatus, error) {
	switch s {
	case "OPENED":
		return IssueCountRequestStatusOpened, nil
	case "IGNORED":
		return IssueCountRequestStatusIgnored, nil
	case "ACKNOWLEDGED":
		return IssueCountRequestStatusAcknowledged, nil
	case "RESOLVED":
		return IssueCountRequestStatusResolved, nil
	}
	var t IssueCountRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IssueCountRequestStatus) Ptr() *IssueCountRequestStatus {
	return &i
}

type IssueCountRequestType string

const (
	IssueCountRequestTypeDelivery       IssueCountRequestType = "delivery"
	IssueCountRequestTypeTransformation IssueCountRequestType = "transformation"
	IssueCountRequestTypeBackpressure   IssueCountRequestType = "backpressure"
)

func NewIssueCountRequestTypeFromString(s string) (IssueCountRequestType, error) {
	switch s {
	case "delivery":
		return IssueCountRequestTypeDelivery, nil
	case "transformation":
		return IssueCountRequestTypeTransformation, nil
	case "backpressure":
		return IssueCountRequestTypeBackpressure, nil
	}
	var t IssueCountRequestType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IssueCountRequestType) Ptr() *IssueCountRequestType {
	return &i
}

type IssueListRequestDir string

const (
	IssueListRequestDirAsc  IssueListRequestDir = "asc"
	IssueListRequestDirDesc IssueListRequestDir = "desc"
)

func NewIssueListRequestDirFromString(s string) (IssueListRequestDir, error) {
	switch s {
	case "asc":
		return IssueListRequestDirAsc, nil
	case "desc":
		return IssueListRequestDirDesc, nil
	}
	var t IssueListRequestDir
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IssueListRequestDir) Ptr() *IssueListRequestDir {
	return &i
}

type IssueListRequestOrderBy string

const (
	IssueListRequestOrderByCreatedAt   IssueListRequestOrderBy = "created_at"
	IssueListRequestOrderByFirstSeenAt IssueListRequestOrderBy = "first_seen_at"
	IssueListRequestOrderByLastSeenAt  IssueListRequestOrderBy = "last_seen_at"
	IssueListRequestOrderByOpenedAt    IssueListRequestOrderBy = "opened_at"
	IssueListRequestOrderByStatus      IssueListRequestOrderBy = "status"
)

func NewIssueListRequestOrderByFromString(s string) (IssueListRequestOrderBy, error) {
	switch s {
	case "created_at":
		return IssueListRequestOrderByCreatedAt, nil
	case "first_seen_at":
		return IssueListRequestOrderByFirstSeenAt, nil
	case "last_seen_at":
		return IssueListRequestOrderByLastSeenAt, nil
	case "opened_at":
		return IssueListRequestOrderByOpenedAt, nil
	case "status":
		return IssueListRequestOrderByStatus, nil
	}
	var t IssueListRequestOrderBy
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IssueListRequestOrderBy) Ptr() *IssueListRequestOrderBy {
	return &i
}

type IssueListRequestStatus string

const (
	IssueListRequestStatusOpened       IssueListRequestStatus = "OPENED"
	IssueListRequestStatusIgnored      IssueListRequestStatus = "IGNORED"
	IssueListRequestStatusAcknowledged IssueListRequestStatus = "ACKNOWLEDGED"
	IssueListRequestStatusResolved     IssueListRequestStatus = "RESOLVED"
)

func NewIssueListRequestStatusFromString(s string) (IssueListRequestStatus, error) {
	switch s {
	case "OPENED":
		return IssueListRequestStatusOpened, nil
	case "IGNORED":
		return IssueListRequestStatusIgnored, nil
	case "ACKNOWLEDGED":
		return IssueListRequestStatusAcknowledged, nil
	case "RESOLVED":
		return IssueListRequestStatusResolved, nil
	}
	var t IssueListRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IssueListRequestStatus) Ptr() *IssueListRequestStatus {
	return &i
}

type IssueListRequestType string

const (
	IssueListRequestTypeDelivery       IssueListRequestType = "delivery"
	IssueListRequestTypeTransformation IssueListRequestType = "transformation"
	IssueListRequestTypeBackpressure   IssueListRequestType = "backpressure"
)

func NewIssueListRequestTypeFromString(s string) (IssueListRequestType, error) {
	switch s {
	case "delivery":
		return IssueListRequestTypeDelivery, nil
	case "transformation":
		return IssueListRequestTypeTransformation, nil
	case "backpressure":
		return IssueListRequestTypeBackpressure, nil
	}
	var t IssueListRequestType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IssueListRequestType) Ptr() *IssueListRequestType {
	return &i
}

// New status
type IssueUpdateRequestStatus string

const (
	IssueUpdateRequestStatusOpened       IssueUpdateRequestStatus = "OPENED"
	IssueUpdateRequestStatusIgnored      IssueUpdateRequestStatus = "IGNORED"
	IssueUpdateRequestStatusAcknowledged IssueUpdateRequestStatus = "ACKNOWLEDGED"
	IssueUpdateRequestStatusResolved     IssueUpdateRequestStatus = "RESOLVED"
)

func NewIssueUpdateRequestStatusFromString(s string) (IssueUpdateRequestStatus, error) {
	switch s {
	case "OPENED":
		return IssueUpdateRequestStatusOpened, nil
	case "IGNORED":
		return IssueUpdateRequestStatusIgnored, nil
	case "ACKNOWLEDGED":
		return IssueUpdateRequestStatusAcknowledged, nil
	case "RESOLVED":
		return IssueUpdateRequestStatusResolved, nil
	}
	var t IssueUpdateRequestStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IssueUpdateRequestStatus) Ptr() *IssueUpdateRequestStatus {
	return &i
}

type IssueUpdateRequest struct {
	// New status
	Status IssueUpdateRequestStatus `json:"status,omitempty"`
}
