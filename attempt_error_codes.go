// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Attempt could not complete because of an error
type AttemptErrorCodes uint8

const (
	AttemptErrorCodesTimeout AttemptErrorCodes = iota + 1
	AttemptErrorCodesNotFound
	AttemptErrorCodesConnectionRefused
	AttemptErrorCodesConnectionReset
	AttemptErrorCodesMissingUrl
	AttemptErrorCodesCli
	AttemptErrorCodesCliUnavailable
	AttemptErrorCodesSelfSignedCert
	AttemptErrorCodesErrTlsCertAltnameInvalid
	AttemptErrorCodesSslErrorCaUnknown
	AttemptErrorCodesTtlExpired
	AttemptErrorCodesDataArchived
	AttemptErrorCodesSslCertExpired
	AttemptErrorCodesBulkRetryCancelled
	AttemptErrorCodesDnsLookupFailed
	AttemptErrorCodesHostUnreachable
	AttemptErrorCodesProtocolError
	AttemptErrorCodesSocketClosed
	AttemptErrorCodesUnknown
)

func (a AttemptErrorCodes) String() string {
	switch a {
	default:
		return strconv.Itoa(int(a))
	case AttemptErrorCodesTimeout:
		return "TIMEOUT"
	case AttemptErrorCodesNotFound:
		return "NOT_FOUND"
	case AttemptErrorCodesConnectionRefused:
		return "CONNECTION_REFUSED"
	case AttemptErrorCodesConnectionReset:
		return "CONNECTION_RESET"
	case AttemptErrorCodesMissingUrl:
		return "MISSING_URL"
	case AttemptErrorCodesCli:
		return "CLI"
	case AttemptErrorCodesCliUnavailable:
		return "CLI_UNAVAILABLE"
	case AttemptErrorCodesSelfSignedCert:
		return "SELF_SIGNED_CERT"
	case AttemptErrorCodesErrTlsCertAltnameInvalid:
		return "ERR_TLS_CERT_ALTNAME_INVALID"
	case AttemptErrorCodesSslErrorCaUnknown:
		return "SSL_ERROR_CA_UNKNOWN"
	case AttemptErrorCodesTtlExpired:
		return "TTL_EXPIRED"
	case AttemptErrorCodesDataArchived:
		return "DATA_ARCHIVED"
	case AttemptErrorCodesSslCertExpired:
		return "SSL_CERT_EXPIRED"
	case AttemptErrorCodesBulkRetryCancelled:
		return "BULK_RETRY_CANCELLED"
	case AttemptErrorCodesDnsLookupFailed:
		return "DNS_LOOKUP_FAILED"
	case AttemptErrorCodesHostUnreachable:
		return "HOST_UNREACHABLE"
	case AttemptErrorCodesProtocolError:
		return "PROTOCOL_ERROR"
	case AttemptErrorCodesSocketClosed:
		return "SOCKET_CLOSED"
	case AttemptErrorCodesUnknown:
		return "UNKNOWN"
	}
}

func (a AttemptErrorCodes) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", a.String())), nil
}

func (a *AttemptErrorCodes) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "TIMEOUT":
		value := AttemptErrorCodesTimeout
		*a = value
	case "NOT_FOUND":
		value := AttemptErrorCodesNotFound
		*a = value
	case "CONNECTION_REFUSED":
		value := AttemptErrorCodesConnectionRefused
		*a = value
	case "CONNECTION_RESET":
		value := AttemptErrorCodesConnectionReset
		*a = value
	case "MISSING_URL":
		value := AttemptErrorCodesMissingUrl
		*a = value
	case "CLI":
		value := AttemptErrorCodesCli
		*a = value
	case "CLI_UNAVAILABLE":
		value := AttemptErrorCodesCliUnavailable
		*a = value
	case "SELF_SIGNED_CERT":
		value := AttemptErrorCodesSelfSignedCert
		*a = value
	case "ERR_TLS_CERT_ALTNAME_INVALID":
		value := AttemptErrorCodesErrTlsCertAltnameInvalid
		*a = value
	case "SSL_ERROR_CA_UNKNOWN":
		value := AttemptErrorCodesSslErrorCaUnknown
		*a = value
	case "TTL_EXPIRED":
		value := AttemptErrorCodesTtlExpired
		*a = value
	case "DATA_ARCHIVED":
		value := AttemptErrorCodesDataArchived
		*a = value
	case "SSL_CERT_EXPIRED":
		value := AttemptErrorCodesSslCertExpired
		*a = value
	case "BULK_RETRY_CANCELLED":
		value := AttemptErrorCodesBulkRetryCancelled
		*a = value
	case "DNS_LOOKUP_FAILED":
		value := AttemptErrorCodesDnsLookupFailed
		*a = value
	case "HOST_UNREACHABLE":
		value := AttemptErrorCodesHostUnreachable
		*a = value
	case "PROTOCOL_ERROR":
		value := AttemptErrorCodesProtocolError
		*a = value
	case "SOCKET_CLOSED":
		value := AttemptErrorCodesSocketClosed
		*a = value
	case "UNKNOWN":
		value := AttemptErrorCodesUnknown
		*a = value
	}
	return nil
}
