// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	strconv "strconv"
)

// Supported topics
type TopicsValue uint8

const (
	TopicsValueIssueOpened TopicsValue = iota + 1
	TopicsValueIssueUpdated
	TopicsValueDeprecatedAttemptFailed
	TopicsValueEventSuccessful
)

func (t TopicsValue) String() string {
	switch t {
	default:
		return strconv.Itoa(int(t))
	case TopicsValueIssueOpened:
		return "issue.opened"
	case TopicsValueIssueUpdated:
		return "issue.updated"
	case TopicsValueDeprecatedAttemptFailed:
		return "deprecated.attempt-failed"
	case TopicsValueEventSuccessful:
		return "event.successful"
	}
}

func (t TopicsValue) MarshalJSON() ([]byte, error) {
	return []byte(fmt.Sprintf("%q", t.String())), nil
}

func (t *TopicsValue) UnmarshalJSON(data []byte) error {
	var raw string
	if err := json.Unmarshal(data, &raw); err != nil {
		return err
	}
	switch raw {
	case "issue.opened":
		value := TopicsValueIssueOpened
		*t = value
	case "issue.updated":
		value := TopicsValueIssueUpdated
		*t = value
	case "deprecated.attempt-failed":
		value := TopicsValueDeprecatedAttemptFailed
		*t = value
	case "event.successful":
		value := TopicsValueEventSuccessful
		*t = value
	}
	return nil
}
