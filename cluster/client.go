// This file was auto-generated by Fern from our API Definition.

package cluster

import (
	context "context"
	fmt "fmt"
	hookdeckgosdk "github.com/hookdeck/hookdeck-go-sdk"
	core "github.com/hookdeck/hookdeck-go-sdk/core"
	http "net/http"
	url "net/url"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...core.ClientOption) *Client {
	options := core.NewClientOptions()
	for _, opt := range opts {
		opt(options)
	}
	return &Client{
		baseURL: options.BaseURL,
		caller:  core.NewCaller(options.HTTPClient),
		header:  options.ToHeader(),
	}
}

// Get information about the current state and composition of the cluster
func (c *Client) Status(ctx context.Context) (*hookdeckgosdk.ClusterStatusResponse, error) {
	baseURL := "http://localhost:6333"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "cluster"

	var response *hookdeckgosdk.ClusterStatusResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodGet,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

func (c *Client) RecoverCurrentPeer(ctx context.Context) (*hookdeckgosdk.RecoverCurrentPeerResponse, error) {
	baseURL := "http://localhost:6333"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := baseURL + "/" + "cluster/recover"

	var response *hookdeckgosdk.RecoverCurrentPeerResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodPost,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Tries to remove peer from the cluster. Will return an error if peer has shards on it.
//
// Id of the peer
func (c *Client) RemovePeer(ctx context.Context, peerId int, request *hookdeckgosdk.RemovePeerRequest) (*hookdeckgosdk.RemovePeerResponse, error) {
	baseURL := "http://localhost:6333"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	endpointURL := fmt.Sprintf(baseURL+"/"+"cluster/peer/%v", peerId)

	queryParams := make(url.Values)
	if request.Force != nil {
		queryParams.Add("force", fmt.Sprintf("%v", *request.Force))
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	var response *hookdeckgosdk.RemovePeerResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:      endpointURL,
			Method:   http.MethodDelete,
			Headers:  c.header,
			Response: &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
